// Code generated by go-bindata.
// sources:
// index.tpl
// list.tpl
// package.tpl
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x51\x8b\xd4\x40\x10\x84\xdf\xf3\x2b\xca\xbc\x9b\x70\xf7\x24\x92\x0d\x9c\xa7\x08\xa2\x22\xdc\xf9\x03\x7a\x27\xbd\x99\x61\x93\xee\xd8\xd3\xd9\x75\x39\xee\xbf\xcb\x26\xeb\xb1\x07\x82\x4f\x03\x5d\xd5\x5f\x4d\x0d\xd3\xbc\xe9\x34\xf8\x69\x62\x44\x1f\x87\xb6\x68\xfe\x1e\x4c\x5d\x5b\x00\x40\xe3\xc9\x07\x6e\xef\xa4\x33\x1d\xb9\xa3\xa6\x5e\x07\xab\x38\xb2\x13\x42\x24\xcb\xec\x9b\x72\xf6\xdd\xdb\x77\xe5\xb5\x24\x34\xf2\xa6\xa4\xd9\xa3\x5a\x89\xa0\xe2\x2c\xbe\x29\xbf\xd0\x09\x8f\x74\x1a\xd4\xfe\xe1\xee\x38\x07\x4b\x93\x27\x95\xab\x95\x97\x0b\x20\x65\x10\x7a\xa3\x29\x42\x77\xf0\xc8\x60\xf1\x64\x8c\xbd\xe8\x51\x70\x48\x39\x6d\x07\x46\xaf\x98\x25\x1d\xd8\x32\x97\x6d\xd1\xd4\x6b\xa5\x66\xab\xdd\xe9\x5c\xf0\xe6\xba\x52\xbc\x39\x8f\x6e\xdb\x07\x26\x0b\x71\x61\x7e\x5a\x99\x9f\x75\x20\xe9\xf1\xf3\x42\x6a\xea\x78\xdb\x16\xdf\xe7\x71\xcb\x76\x4e\x9f\x28\xec\xa9\xe7\x8c\x24\x48\xd2\xf1\xef\xf7\x78\x7a\x42\xf5\xf1\x43\xf5\xe3\xa2\x7c\x65\xc1\xf3\x73\xd1\x6c\xad\x2d\xee\x8d\x8e\x03\x7e\xcd\x3c\x33\x06\x96\xde\xe3\x8b\xfd\x51\x17\xf1\x95\xfd\x2e\x78\x3a\x30\x8e\x6a\x7b\xb6\xbc\x58\x97\x0c\x54\xf7\x2a\xbb\xd4\x57\xdf\x28\x3b\x5b\xf5\xe0\xe4\x19\xa5\xf1\xa8\xce\xb9\x7c\x1d\x97\x91\x93\x04\xc6\x64\xda\x1b\x8d\xc8\x4e\xe6\xdc\xfd\x97\x16\x96\xe5\x15\x56\x5f\x1e\xad\x5e\x7f\xc7\x9f\x00\x00\x00\xff\xff\xfe\xc2\xa8\xb3\x35\x02\x00\x00")

func indexTplBytes() ([]byte, error) {
	return bindataRead(
		_indexTpl,
		"index.tpl",
	)
}

func indexTpl() (*asset, error) {
	bytes, err := indexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tpl", size: 565, mode: os.FileMode(436), modTime: time.Unix(1529466680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\x6f\x66\xc7\x75\xb9\x8e\xe1\x18\x76\xdd\xa9\x87\xfd\x01\x35\x56\x63\xd3\x44\x0e\x8e\xda\x11\x4c\xfe\xfb\x68\xc3\x4a\x07\x3b\xd9\x42\xef\x7b\xd2\x93\x7b\x0a\xb9\xd3\x65\x62\x44\x1d\x07\x6f\xdc\xef\xc3\x14\xbc\x01\x00\xa7\x49\x07\xf6\xb5\x62\x60\xc1\x2b\xd6\x15\x7b\xea\x4e\xd4\xf3\x8c\x1d\x3e\x24\x94\x3c\x72\x20\xd7\x6c\xba\x8d\x19\x59\x09\x5d\xa4\x32\xb3\xb6\xf6\xac\xc7\xdd\x9b\x7d\x6c\x09\x8d\xdc\x5a\x3a\x6b\xcc\xc5\xa2\xcb\xa2\x2c\xda\xda\x4f\x5a\xf0\x45\xcb\x90\xcb\x3f\xea\xc0\x73\x57\xd2\xa4\x29\xcb\x03\x72\x5f\x00\x69\x06\xa1\x2f\x34\x45\xe4\x23\x34\x32\x58\x34\x15\xc6\x49\xf2\xb7\xe0\x92\xe6\x74\x18\x18\x7d\xc6\x59\xd2\x85\xcb\xcc\xd6\x1b\xd7\x6c\x49\xdd\x21\x87\xc5\x1b\x53\x2b\x0a\x49\xcf\x78\x9e\x4e\xfd\x9e\x34\xbe\xdc\x7e\x78\x6f\x6f\xd1\x8d\x23\xc4\xc2\xc7\xd6\x36\xb5\xde\x35\x58\x57\xeb\xff\xd6\xae\xa1\xab\x69\xf1\x57\x47\x96\x70\x65\x8d\x6b\xb6\x29\xae\xd9\xae\xfc\x13\x00\x00\xff\xff\x59\xb1\xc1\x65\x7d\x01\x00\x00")

func listTplBytes() ([]byte, error) {
	return bindataRead(
		_listTpl,
		"list.tpl",
	)
}

func listTpl() (*asset, error) {
	bytes, err := listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.tpl", size: 381, mode: os.FileMode(436), modTime: time.Unix(1529561082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcf\x4f\xdb\x30\x14\xc7\xef\xf9\x2b\x1e\x11\x87\x4d\x5a\x9b\x03\x3b\x4c\xc8\xb5\x04\xad\xd0\x40\x6c\x43\x2d\x70\x99\x76\x70\xe3\xd7\xc6\x22\xb1\x23\xdb\xa1\x44\x55\xfe\xf7\xc9\x76\xd2\x86\x34\x9b\xb8\xb4\x7e\xdf\x7c\xde\x0f\xfb\x3d\x9b\x9c\x71\x95\xda\xba\x44\xc8\x6c\x91\xd3\x88\x74\x7f\xc8\x38\x8d\x00\x00\x88\x15\x36\x47\xba\xdf\xc3\xf4\x81\xd9\x0c\x9a\x06\x26\x70\x25\xb9\x56\x05\x72\x46\x92\xf0\x39\xa0\x05\x5a\x06\x69\xc6\xb4\x41\x3b\x8b\x2b\xbb\x99\x7c\x8b\xfb\x9f\x24\x2b\x70\x16\xb3\xca\x66\x4a\xc7\x90\x2a\x69\x51\xda\x59\x7c\xc7\x6a\x78\x64\x75\xae\xf4\x08\xcd\xd1\xa4\x5a\x94\x56\x28\xd9\x73\x39\x14\x00\xc2\x00\x83\xad\x66\x65\x06\x6a\x03\x36\x43\x40\x69\x85\x46\x78\x91\x6a\x27\xe1\x55\x18\xb1\xce\x11\xb6\x0a\x2a\x29\x5e\x51\x1b\x8c\x69\x44\x92\xb0\x41\xb2\x56\xbc\xa6\x51\x44\xb8\x78\xa5\xb7\x8b\x4b\x70\xdb\xbc\x5d\x40\xd3\x90\xc4\x49\x11\xc9\x2e\xe8\x03\x4b\x5f\xd8\x16\x61\xa9\x94\x0d\x44\x7b\x10\x24\xc9\x2e\x68\xf0\x7d\x5a\xde\x5f\x02\x61\x90\x69\xdc\xcc\x62\xc7\x3c\x2d\xef\xa1\x69\x62\xf0\x82\x54\x1b\x95\xe7\x6a\x17\xd3\xe3\x27\x92\x30\xda\x65\x39\x9b\x4c\xc0\xc7\xf9\xc9\x0a\x0c\x39\xdc\xea\x50\x07\x4c\x26\x7d\xea\xd7\x4e\xa2\x0e\x98\x5f\x0e\x38\xb7\x7a\x9e\xaf\x02\xf0\x3c\x5f\xf5\xb6\xe3\x7e\x6f\x84\x36\x16\x0c\xa2\x0c\x84\xb7\x57\x88\xf2\xca\xf6\x37\xae\x69\x14\xed\xf7\x20\x36\x30\x5d\x30\xcb\xa0\x69\x82\xbb\x33\xa6\x4b\x2c\x55\xf0\x3e\x98\x83\x2c\x5e\x9f\xab\xa2\x10\xd6\xf4\xc8\x56\x19\x83\xaf\x35\x93\x69\x86\x7d\xba\x93\xc6\xf0\x47\xb6\xed\xa3\xce\x1c\x8d\x5a\xdb\xf7\x21\x9d\x3d\x06\xde\x28\xfd\xd2\x07\xbd\x7d\x04\xc3\x51\x7c\x12\x92\xe3\x5b\x4b\xac\xaa\x75\x3b\x1b\x06\xe2\xf8\xf3\xf0\x84\x18\x77\xbd\x24\xa5\xf6\xb7\xe7\x7f\x9e\x2d\xec\x93\x39\xfc\x98\x12\x25\xf7\x61\x5d\x37\x8e\x66\xd7\x97\xdb\xa2\x54\xda\x22\xbf\xae\x03\xf4\x95\x76\x0a\x5c\xd7\xce\x8c\x48\x95\x7b\x47\xcd\xe4\x16\xe1\x5c\x14\x25\x5c\xce\x86\x8e\xfe\xca\xe5\x82\x1e\xe6\x37\xd9\xef\x03\xdb\x34\x7e\x62\xdb\x75\x98\xd8\x5c\xbc\xab\x2c\xa9\x72\x7a\x52\x9f\xcb\x3d\xd7\x6c\x97\xc3\x77\x61\xac\xd2\x35\x49\x5c\x35\xbd\x42\xf8\xdb\x17\x38\x4f\x3d\xe2\x0a\x6a\xb1\xc3\x11\xb6\xf6\x6f\x9f\x9c\xbf\x41\xd3\xfc\x81\x45\xa5\x99\x7b\x06\x7c\x8f\x82\xef\xb4\xd3\x06\x0d\x1d\x73\x5f\x59\xe6\xb6\xdc\xf7\xbe\x53\xeb\x56\x7d\x37\xfa\xff\x8a\x70\x23\xa4\x30\xd9\x49\x88\x4e\xfe\x50\x8c\x55\x95\xa6\x88\xfc\xb4\x8e\x4e\xff\x40\x8c\x1f\x68\x8c\x1b\x9d\x41\x88\x4e\x1e\x5c\xe2\x7e\x5b\x92\xf0\xde\x91\x24\x3c\xf3\x7f\x03\x00\x00\xff\xff\x2f\xed\x77\x2e\xfe\x05\x00\x00")

func packageTplBytes() ([]byte, error) {
	return bindataRead(
		_packageTpl,
		"package.tpl",
	)
}

func packageTpl() (*asset, error) {
	bytes, err := packageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.tpl", size: 1534, mode: os.FileMode(436), modTime: time.Unix(1529653440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tpl": indexTpl,
	"list.tpl": listTpl,
	"package.tpl": packageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tpl": &bintree{indexTpl, map[string]*bintree{}},
	"list.tpl": &bintree{listTpl, map[string]*bintree{}},
	"package.tpl": &bintree{packageTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

