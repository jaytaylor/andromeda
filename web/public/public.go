// Code generated by go-bindata.
// sources:
// index.tpl
// list.tpl
// package.tpl
// subpackage.tpl
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x93\xd1\x6a\xe3\x3a\x10\x86\xef\xf3\x14\x73\x4c\x6f\x6b\xd3\xf6\xe6\x50\x64\x43\x36\x85\x85\xa5\xbb\x14\xda\x7d\x80\x89\x35\xb1\x44\x64\xc9\x3b\x1a\x27\x1b\x8c\xdf\x7d\x91\xed\xa4\x69\x59\x58\xdf\x58\xcc\x7c\xfa\x47\xff\x8c\xa4\xfe\xd3\xa1\x96\x53\x47\x60\xa4\x75\xd5\x4a\x9d\x7f\x84\xba\x5a\x01\x00\x28\xb1\xe2\xa8\x5a\x7b\xcd\xa1\x25\x8d\xaa\x98\x03\x73\xb2\x25\x41\xa8\x0d\x72\x24\x29\xb3\x5e\x76\xb7\xff\x67\xd7\x29\x8f\x2d\x95\x19\xf6\x62\x02\x67\x50\x07\x2f\xe4\xa5\xcc\xbe\xe1\x09\xde\xf0\xe4\x02\xff\x85\xd6\x14\x6b\xb6\x9d\xd8\xe0\xaf\xb6\x5c\x0e\x00\x36\x02\x42\xc3\xd8\x19\x08\x3b\x10\x43\x40\x5e\x2c\x13\xec\x7d\x38\x7a\x38\xd8\x68\xb7\x8e\xa0\x09\xd0\x7b\x7b\x20\x8e\x94\x55\x2b\x55\xcc\x96\xd4\x36\xe8\x53\x32\x78\x77\x6d\xc9\xdc\xa5\xd0\x7d\xf5\x4a\xc8\xb5\xb9\xd6\x3c\xab\x7d\x0d\x0e\x7d\x03\x3f\x17\x45\x55\x98\xfb\x24\xc6\xd5\x6a\x18\xe0\x68\xc5\xc0\x8d\x43\xa1\x28\xf0\x58\x42\xbe\x09\x7e\x67\x9b\xfc\x3b\x46\x21\xce\x9f\xe7\xc4\x38\x26\xd6\xee\x2e\xe4\x38\xae\x94\xb6\x87\xa5\x03\xe6\xa1\x5a\xc0\x0d\xe3\xd1\x91\x86\x17\xac\xf7\xd8\x50\x54\x85\x79\x58\xa0\xde\x41\x94\x93\xa3\x32\x73\x36\xca\xed\xb4\xbe\x4d\xf3\x7b\x04\x1f\x7c\x32\x3a\x0c\xc0\xe8\x1b\x82\x9b\x6e\xdf\xa4\xc3\x5c\x55\x83\xe5\x53\xce\x56\xc3\x30\x11\xf9\x13\x0a\xe6\x1b\x26\x14\xd2\xeb\x44\x81\x42\x30\x4c\xbb\x32\x2b\xce\xcc\x0b\x8a\x81\x71\xcc\xaa\x4f\x01\x55\x60\xa5\x0a\x67\xa7\xaa\xe4\xf5\xb9\x86\x2a\xfa\x74\x89\x8a\xc9\xdc\x7b\xea\x7d\xf5\xa3\x6f\xb7\xc4\x69\x7c\xdd\xe2\x11\xac\x07\xeb\x35\xfd\x7e\x84\x61\x80\xfc\xe9\x4b\x7e\x76\xff\x4c\x7e\xea\x54\xea\xf5\xd4\x19\xf8\xd5\x53\x4f\xe0\xc8\x37\x62\x2e\xf8\x5b\x98\x92\x1f\xf0\x75\x2d\xf6\x40\x70\x0c\xbc\x27\x8e\x13\x3a\xd5\xf8\x3c\xa0\x57\x41\x89\x90\x31\xb5\x41\x28\x66\x1f\xcb\x45\x88\xd6\xd7\x04\x1d\x87\x86\xb1\x85\x28\xc8\x42\xfa\x9f\x6a\xf5\xb4\x79\x16\x2b\x96\x5b\x57\xcc\xcf\xeb\x4f\x00\x00\x00\xff\xff\x0f\x9f\x77\x2f\x76\x03\x00\x00")

func indexTplBytes() ([]byte, error) {
	return bindataRead(
		_indexTpl,
		"index.tpl",
	)
}

func indexTpl() (*asset, error) {
	bytes, err := indexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tpl", size: 886, mode: os.FileMode(436), modTime: time.Unix(1529878619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\x6f\x66\xc7\x75\xb9\x8e\xe1\x18\x76\xdd\xa9\x87\xfd\x01\x35\x56\x63\xd3\x44\x0e\x8e\xda\x11\x4c\xfe\xfb\x68\xc3\x4a\x07\x3b\xd9\x42\xef\x7b\xd2\x93\x7b\x0a\xb9\xd3\x65\x62\x44\x1d\x07\x6f\xdc\xef\xc3\x14\xbc\x01\x00\xa7\x49\x07\xf6\xb5\x62\x60\xc1\x2b\xd6\x15\x7b\xea\x4e\xd4\xf3\x8c\x1d\x3e\x24\x94\x3c\x72\x20\xd7\x6c\xba\x8d\x19\x59\x09\x5d\xa4\x32\xb3\xb6\xf6\xac\xc7\xdd\x9b\x7d\x6c\x09\x8d\xdc\x5a\x3a\x6b\xcc\xc5\xa2\xcb\xa2\x2c\xda\xda\x4f\x5a\xf0\x45\xcb\x90\xcb\x3f\xea\xc0\x73\x57\xd2\xa4\x29\xcb\x03\x72\x5f\x00\x69\x06\xa1\x2f\x34\x45\xe4\x23\x34\x32\x58\x34\x15\xc6\x49\xf2\xb7\xe0\x92\xe6\x74\x18\x18\x7d\xc6\x59\xd2\x85\xcb\xcc\xd6\x1b\xd7\x6c\x49\xdd\x21\x87\xc5\x1b\x53\x2b\x0a\x49\xcf\x78\x9e\x4e\xfd\x9e\x34\xbe\xdc\x7e\x78\x6f\x6f\xd1\x8d\x23\xc4\xc2\xc7\xd6\x36\xb5\xde\x35\x58\x57\xeb\xff\xd6\xae\xa1\xab\x69\xf1\x57\x47\x96\x70\x65\x8d\x6b\xb6\x29\xae\xd9\xae\xfc\x13\x00\x00\xff\xff\x59\xb1\xc1\x65\x7d\x01\x00\x00")

func listTplBytes() ([]byte, error) {
	return bindataRead(
		_listTpl,
		"list.tpl",
	)
}

func listTpl() (*asset, error) {
	bytes, err := listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.tpl", size: 381, mode: os.FileMode(436), modTime: time.Unix(1529871495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x41\x6f\xdb\x3a\x0c\xbe\xe7\x57\x70\x46\x8f\x4b\x8c\xa2\x3b\x3c\x04\x8a\x81\xb5\x45\xf1\x5a\xec\x75\x45\xb2\xed\xf2\xf0\x0e\x8a\xc5\x58\x42\x6c\xc9\x90\xe4\xa6\x46\x90\xff\xfe\x20\xc9\x76\xe4\xc4\x87\x1d\x76\x49\x44\xea\x23\xf9\x91\x22\x09\x93\x4f\x4c\xe5\xb6\xad\x11\xb8\xad\xca\x6c\x46\xfa\x3f\xa4\x2c\x9b\x01\x00\x10\x2b\x6c\x89\xd9\xf1\x08\x8b\x37\x6a\x39\x9c\x4e\x30\x87\xaf\x92\x69\x55\x21\xa3\x24\x0d\xd7\x01\x5a\xa1\xa5\x90\x73\xaa\x0d\xda\x55\xd2\xd8\xdd\xfc\xaf\x24\xbe\x92\xb4\xc2\x55\x42\x1b\xcb\x95\x4e\x20\x57\xd2\xa2\xb4\xab\xe4\x85\xb6\xf0\x83\xb6\xa5\xd2\x13\x68\x86\x26\xd7\xa2\xb6\x42\xc9\xc8\x64\x20\x00\xc2\x00\x85\x42\xd3\x9a\x83\xda\x81\xe5\x08\x28\xad\xd0\x08\x7b\xa9\x0e\x12\xde\x85\x11\xdb\x12\xa1\x50\xd0\x48\xf1\x8e\xda\x60\x92\xcd\x48\x1a\x12\x24\x5b\xc5\xda\x6c\x36\x23\xfc\xd6\x67\xb8\xc6\x5a\xbd\xd2\x0a\xe1\x74\x22\x29\xbf\x75\x37\x4c\xbc\x67\x33\x42\x81\x6b\xdc\xad\x92\x34\xc9\x52\x92\xd2\x6c\x76\x3c\x82\xa6\xb2\x40\xb8\xa9\xa9\x46\x69\x7d\x6d\x96\x2b\x57\xa4\x5e\x34\x70\x3a\x45\x96\xc7\x63\x8c\xed\x8b\x99\x64\x17\xfa\x21\x7c\x08\x82\x92\x79\x37\x69\xe0\xc1\x75\xcf\xe9\xf9\x71\x09\x8e\xf2\xf3\xa3\x47\x87\xeb\x4f\xf3\x39\xe1\x77\xd9\x1b\xcd\xf7\xb4\x40\x58\x2b\x65\x03\xaa\x8b\x46\x52\x7e\x97\xcd\xe7\x59\x70\xf1\x73\xfd\x6d\x09\x03\x41\x07\xfb\xb9\xfe\xe6\x38\x81\x57\x48\xb5\x53\x65\xa9\x0e\x9e\x62\x77\xe5\x68\x45\xc1\xc0\xfb\x71\x94\x43\x98\x81\xbc\x53\x83\x0f\x34\xa0\xbe\x1f\x24\xea\x00\xf3\xc7\x0b\x9c\x3b\xfd\x7a\xd8\x04\xc0\xaf\x87\x4d\x94\x95\xfb\x7d\x12\xda\x58\x30\x88\x32\x20\xbc\xbc\x41\x94\x5f\xed\x05\xf2\x5c\xf1\xf7\xdb\x34\xca\x3d\xc9\x5e\x36\xdf\x5f\xe3\x04\x46\x68\x6e\x6d\x6d\x96\x69\x5a\x28\xa6\xf2\x85\xd2\xc5\xd8\xf6\x51\xe5\x4d\x85\xd2\x52\xd7\x88\xb1\x93\xf0\x22\x51\xd1\x9f\xe5\x4e\xe9\xaa\xc3\xf1\x3b\xff\x8a\x62\x07\x8b\x47\x6a\xa9\x7f\x4a\x67\xe7\x04\xdf\x6d\x21\x9b\x41\xbc\xc8\xc5\xeb\x1f\x54\x55\x09\x6b\x22\x64\xa7\x99\x02\xdf\x6b\x2a\x73\x8e\x31\xba\x57\x4d\xc1\x7f\xd0\x22\x86\x3a\x71\xd2\x6b\x6b\xc7\x2e\x9d\x3c\x05\x7c\x52\x7a\x1f\x03\xbd\x7c\x06\xba\x5a\x1c\x84\xe5\x70\x63\x9a\xed\xdb\xbe\x70\x13\x23\x24\xc3\x8f\x0e\xbe\x69\xb6\x5d\x19\x0d\x24\x89\xab\x56\x28\x5e\x07\x5f\x3c\x57\xb5\xd2\xd6\x0c\x65\x9c\x11\xfe\x25\xeb\x94\x24\xe5\x5f\xb2\x19\x69\x4a\x30\xb6\x2d\x71\x95\x94\xc2\xd8\xb9\x3f\xcf\xdd\x86\x5b\x82\x54\xd2\x0d\xff\x79\x74\x45\x55\x3b\x06\x13\xde\xfd\x16\x2a\x45\x36\x1e\x5f\x87\xef\x47\x36\x9c\x43\x27\x94\x62\x3c\xab\x8d\x5b\xa1\x21\xe3\xb3\xba\x4b\x85\x4a\x36\x64\xdf\x07\x5e\x23\x65\x7e\x70\x42\x3b\xc5\x1d\xe2\x2e\x96\x40\x6a\xed\x57\xf0\x95\x01\x49\xdd\xcd\x55\xac\xa9\x53\xe8\xd4\xa8\x19\x47\xd5\x0e\xd0\x9b\x3a\xbc\xc9\x22\x18\xdc\xb9\x98\x25\xca\x49\x3c\xbc\xa2\xb1\xc8\xa0\x57\x2d\x87\x6e\xef\xaa\x1b\xb8\xba\x09\xfa\x1c\xbf\x77\xec\xe6\x4d\xa3\xb5\xed\xc4\x9e\xdc\x17\xfd\xe8\xa5\xe7\xb4\x47\x2b\x73\xa4\xf2\xdb\x92\x6c\xf5\x74\x0d\xfa\xa4\xc3\xfb\x22\xbb\x0f\x11\x87\xd6\x41\x06\xf7\x2d\xe9\xba\x67\xa2\x3f\x2e\x0c\xff\x40\x6f\xf0\x11\x53\x4f\xe5\x41\xd3\x43\x09\x7f\x0b\x63\x95\x6e\x43\x2f\x47\x44\xd8\xc7\x67\xb8\xc9\x3d\xc4\x11\xea\x60\xc3\x1c\x74\xf2\xbf\x3e\x38\xfb\x80\xd3\xe9\x3f\x78\x6c\xb4\x5f\x42\x7e\x1a\x83\xed\xa2\xd7\x5d\x8c\xee\x94\xf9\xc6\x52\x97\x72\x6c\xfd\xa2\xb6\x9d\xf6\x6a\xe9\x4e\x79\x78\x12\x52\x18\x7e\xe5\xa2\x57\xff\x96\x8f\x4d\x93\xe7\x88\xec\x9a\x47\xaf\xff\x0d\x1f\xff\xa0\x31\xbe\x41\xc7\x2e\x7a\x75\xe4\xe1\xf2\x59\xd2\xf0\x79\x40\xd2\xf0\x55\xf4\x7f\x00\x00\x00\xff\xff\xf2\x58\xf6\xf7\x2d\x09\x00\x00")

func packageTplBytes() ([]byte, error) {
	return bindataRead(
		_packageTpl,
		"package.tpl",
	)
}

func packageTpl() (*asset, error) {
	bytes, err := packageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.tpl", size: 2349, mode: os.FileMode(436), modTime: time.Unix(1530675486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _subpackageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x6b\xe3\x3c\x10\xbd\xfb\x57\xcc\x67\x7a\xfc\x62\x53\xda\xc3\x12\x14\x43\xdb\x50\x36\x85\x5d\x42\xd3\xdb\xb2\x07\xc5\x9e\x58\x22\xb6\x64\x24\xb9\xad\x31\xf9\xef\x8b\x24\x3b\x51\x9c\xb0\xf4\xb0\x97\x36\x7e\x7a\xef\xe9\xcd\x68\x64\x93\xff\x0a\x99\x9b\xae\x41\x60\xa6\xae\xb2\x88\x8c\xff\x90\x16\x59\x04\x00\x40\x0c\x37\x15\x66\x7d\x0f\xc9\x9a\x1a\x06\x87\x03\xcc\xe0\x41\x14\x4a\xd6\x58\x50\x92\xfa\x65\x4f\xad\xd1\x50\xc8\x19\x55\x1a\xcd\x22\x6e\xcd\x6e\xf6\x2d\x0e\x97\x04\xad\x71\x11\xd3\xd6\x30\xa9\x62\xc8\xa5\x30\x28\xcc\x22\x7e\xa1\x1d\xbc\xd1\xae\x92\xea\x0a\xbb\x40\x9d\x2b\xde\x18\x2e\x45\x20\x39\x06\x00\xae\x81\x42\xa9\x68\xc3\x40\xee\xc0\x30\x04\x14\x86\x2b\x84\xbd\x90\x1f\x02\xde\xb9\xe6\xdb\x0a\xa1\x94\xd0\x0a\xfe\x8e\x4a\x63\x9c\x45\x24\xf5\x05\x92\xad\x2c\xba\x2c\x8a\x08\xbb\x0d\x2b\x24\x29\xbb\xb5\x68\xc1\xdf\xb3\x88\x50\x60\x0a\x77\x8b\x38\x8d\xb3\x94\xa4\x34\x8b\xfa\x1e\x14\x15\x25\xc2\x4d\x43\x15\x0a\xe3\x54\xf3\x05\x24\xeb\x7d\x99\xac\x8f\x90\x3e\xfa\x05\x1e\x7d\x1f\xaa\x46\x42\x9c\x4d\xf0\x9f\xb4\x46\x17\xc4\x6f\x87\xa2\x70\x36\xa9\x4f\xc4\x94\xcb\x7c\x97\xf9\xcd\x60\x4d\xf3\x3d\x2d\x91\xa4\xec\x2e\xf3\xa9\x57\xcb\x39\xb8\x82\xf6\x65\xb2\x5a\x3a\x27\x2f\xb5\x7f\x37\x88\x73\x38\x8b\x34\x24\x3f\x65\x09\x01\x1b\x22\x94\x1f\x95\xcc\x98\x46\xcf\xd3\xb4\x94\x85\xcc\x13\xa9\xca\x34\xe8\x61\x9c\x2d\x65\xde\xd6\x28\x0c\xb5\x67\x17\x9a\x04\xf1\x5d\x6e\x58\x89\x9d\x54\xf5\xc0\xb3\x35\xf4\x3d\xf0\x9d\x0f\xb1\xa4\x86\xba\xda\xad\xd6\x3e\x24\xaf\xd8\xc8\x53\x75\x47\x68\x52\xa4\xc3\x9f\x64\x5d\x73\xa3\x27\xec\x01\xbd\x26\x78\x54\x54\xe4\x0c\xa7\x8a\x11\xbe\x26\x79\xa3\xe5\x94\x6e\xa1\xab\xee\x9d\xb9\xb4\xb6\xd8\x35\xf2\xb3\x54\xfb\x29\xd9\x61\x27\xf2\x38\xa1\xec\x3e\x5b\xd5\x8d\x54\x46\x93\x94\xdd\x67\x11\x69\x2b\xd0\xa6\xab\x70\x11\x57\x5c\x9b\x99\xfb\x3d\xb3\xd7\x7c\x0e\x42\x0a\x7b\x03\x4e\x33\xcc\xeb\xc6\x0d\xef\xa6\xdd\x26\x83\x8b\xed\xb7\xbb\x87\x15\xcf\xce\x47\xd7\x92\xc7\x71\xf5\xbf\xfd\xc1\x56\xfc\x7c\x4e\x5b\xfb\x12\xf1\x21\x4f\xf0\x78\xac\x76\xa7\x57\xa4\x85\x1b\x71\x3f\x0e\xe1\xe9\xda\x85\x39\x90\x46\xf9\xb7\xce\x19\x9b\xa4\x16\xbe\x70\xf6\x23\x15\xfa\xfb\x4a\xb0\x78\xec\xfc\xfa\xd8\x21\x2c\xe0\xb1\x23\x43\x93\xfe\xde\x86\x51\xfc\x0f\x3a\x61\xe3\x05\x7d\xb0\xfb\x3f\x29\xfa\x51\xc1\x77\xae\x8d\x54\x9d\x3f\xb6\x20\x4c\xf1\xf9\x3f\xdc\xe4\x8e\x62\x43\x0d\xb4\xe3\x3d\x18\x9e\x7f\xb9\xcd\x8b\x4f\x38\x1c\x7e\xc3\xb2\x55\xee\x06\xb9\x91\xf1\xda\x64\xc4\x26\xf3\x75\x4d\xbe\x31\xd4\x96\x1c\xaa\x5f\xe4\x76\x40\x1f\xcc\x17\x1c\x9e\xb9\xe0\x9a\x5d\x58\x8c\xf0\x97\x3c\x36\x6d\x9e\x23\x16\x97\x39\x46\xfc\x0b\x1e\x3f\x50\x6b\x5a\x0e\x17\xed\x64\x31\xc2\x81\xc3\xf4\x58\x52\xff\x39\x20\xa9\xff\x0a\xfe\x09\x00\x00\xff\xff\x74\x74\xf6\xf2\x1d\x07\x00\x00")

func subpackageTplBytes() ([]byte, error) {
	return bindataRead(
		_subpackageTpl,
		"subpackage.tpl",
	)
}

func subpackageTpl() (*asset, error) {
	bytes, err := subpackageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subpackage.tpl", size: 1821, mode: os.FileMode(436), modTime: time.Unix(1529888162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tpl": indexTpl,
	"list.tpl": listTpl,
	"package.tpl": packageTpl,
	"subpackage.tpl": subpackageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tpl": &bintree{indexTpl, map[string]*bintree{}},
	"list.tpl": &bintree{listTpl, map[string]*bintree{}},
	"package.tpl": &bintree{packageTpl, map[string]*bintree{}},
	"subpackage.tpl": &bintree{subpackageTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

