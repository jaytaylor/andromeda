// Code generated by go-bindata.
// sources:
// index.tpl
// list.tpl
// package.tpl
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x51\x8b\xd4\x40\x10\x84\xdf\xf3\x2b\xca\xbc\x9b\x70\xf7\x24\x92\x0d\x9c\xa7\x08\xa2\x22\xdc\xf9\x03\x7a\x27\xbd\x99\x61\x93\xee\xd8\xd3\xd9\x75\x39\xee\xbf\xcb\x26\xeb\xb1\x07\x82\x4f\x03\x5d\xd5\x5f\x4d\x0d\xd3\xbc\xe9\x34\xf8\x69\x62\x44\x1f\x87\xb6\x68\xfe\x1e\x4c\x5d\x5b\x00\x40\xe3\xc9\x07\x6e\xef\xa4\x33\x1d\xb9\xa3\xa6\x5e\x07\xab\x38\xb2\x13\x42\x24\xcb\xec\x9b\x72\xf6\xdd\xdb\x77\xe5\xb5\x24\x34\xf2\xa6\xa4\xd9\xa3\x5a\x89\xa0\xe2\x2c\xbe\x29\xbf\xd0\x09\x8f\x74\x1a\xd4\xfe\xe1\xee\x38\x07\x4b\x93\x27\x95\xab\x95\x97\x0b\x20\x65\x10\x7a\xa3\x29\x42\x77\xf0\xc8\x60\xf1\x64\x8c\xbd\xe8\x51\x70\x48\x39\x6d\x07\x46\xaf\x98\x25\x1d\xd8\x32\x97\x6d\xd1\xd4\x6b\xa5\x66\xab\xdd\xe9\x5c\xf0\xe6\xba\x52\xbc\x39\x8f\x6e\xdb\x07\x26\x0b\x71\x61\x7e\x5a\x99\x9f\x75\x20\xe9\xf1\xf3\x42\x6a\xea\x78\xdb\x16\xdf\xe7\x71\xcb\x76\x4e\x9f\x28\xec\xa9\xe7\x8c\x24\x48\xd2\xf1\xef\xf7\x78\x7a\x42\xf5\xf1\x43\xf5\xe3\xa2\x7c\x65\xc1\xf3\x73\xd1\x6c\xad\x2d\xee\x8d\x8e\x03\x7e\xcd\x3c\x33\x06\x96\xde\xe3\x8b\xfd\x51\x17\xf1\x95\xfd\x2e\x78\x3a\x30\x8e\x6a\x7b\xb6\xbc\x58\x97\x0c\x54\xf7\x2a\xbb\xd4\x57\xdf\x28\x3b\x5b\xf5\xe0\xe4\x19\xa5\xf1\xa8\xce\xb9\x7c\x1d\x97\x91\x93\x04\xc6\x64\xda\x1b\x8d\xc8\x4e\xe6\xdc\xfd\x97\x16\x96\xe5\x15\x56\x5f\x1e\xad\x5e\x7f\xc7\x9f\x00\x00\x00\xff\xff\xfe\xc2\xa8\xb3\x35\x02\x00\x00")

func indexTplBytes() ([]byte, error) {
	return bindataRead(
		_indexTpl,
		"index.tpl",
	)
}

func indexTpl() (*asset, error) {
	bytes, err := indexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tpl", size: 565, mode: os.FileMode(436), modTime: time.Unix(1529466680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\x6f\x66\xc7\x75\xb9\x8e\xe1\x18\x76\xdd\xa9\x87\xfd\x01\x35\x56\x63\xd3\x44\x0e\x8e\xda\x11\x4c\xfe\xfb\x68\xc3\x4a\x07\x3b\xd9\x42\xef\x7b\xd2\x93\x7b\x0a\xb9\xd3\x65\x62\x44\x1d\x07\x6f\xdc\xef\xc3\x14\xbc\x01\x00\xa7\x49\x07\xf6\xb5\x62\x60\xc1\x2b\xd6\x15\x7b\xea\x4e\xd4\xf3\x8c\x1d\x3e\x24\x94\x3c\x72\x20\xd7\x6c\xba\x8d\x19\x59\x09\x5d\xa4\x32\xb3\xb6\xf6\xac\xc7\xdd\x9b\x7d\x6c\x09\x8d\xdc\x5a\x3a\x6b\xcc\xc5\xa2\xcb\xa2\x2c\xda\xda\x4f\x5a\xf0\x45\xcb\x90\xcb\x3f\xea\xc0\x73\x57\xd2\xa4\x29\xcb\x03\x72\x5f\x00\x69\x06\xa1\x2f\x34\x45\xe4\x23\x34\x32\x58\x34\x15\xc6\x49\xf2\xb7\xe0\x92\xe6\x74\x18\x18\x7d\xc6\x59\xd2\x85\xcb\xcc\xd6\x1b\xd7\x6c\x49\xdd\x21\x87\xc5\x1b\x53\x2b\x0a\x49\xcf\x78\x9e\x4e\xfd\x9e\x34\xbe\xdc\x7e\x78\x6f\x6f\xd1\x8d\x23\xc4\xc2\xc7\xd6\x36\xb5\xde\x35\x58\x57\xeb\xff\xd6\xae\xa1\xab\x69\xf1\x57\x47\x96\x70\x65\x8d\x6b\xb6\x29\xae\xd9\xae\xfc\x13\x00\x00\xff\xff\x59\xb1\xc1\x65\x7d\x01\x00\x00")

func listTplBytes() ([]byte, error) {
	return bindataRead(
		_listTpl,
		"list.tpl",
	)
}

func listTpl() (*asset, error) {
	bytes, err := listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.tpl", size: 381, mode: os.FileMode(436), modTime: time.Unix(1529560984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4d\x4f\xe3\x3c\x10\xc7\xef\xf9\x14\x43\xc4\xf1\x69\x73\xe0\x39\xac\x90\x1b\x09\x5a\xa1\x05\xb1\xbb\xa8\x05\x2e\xab\x3d\x0c\xf1\xb4\xb1\x48\xec\xc8\x71\x28\x51\x94\xef\xbe\xb2\x9d\x14\xd3\x66\x25\x2e\xad\xe7\x9f\xdf\xbc\x66\x1c\x76\xc6\x55\x66\xda\x8a\x20\x37\x65\x91\x46\x6c\xfc\x23\xe4\x69\x04\x00\xc0\x8c\x30\x05\xa5\x5d\x07\xf3\x07\x34\x39\xf4\x3d\xcc\xe0\x4a\x72\xad\x4a\xe2\xc8\x12\xff\xd8\xa3\x25\x19\x84\x2c\x47\x5d\x93\x59\xc4\x8d\xd9\xce\xbe\xc5\xe1\x23\x89\x25\x2d\x62\x6c\x4c\xae\x74\x0c\x99\x92\x86\xa4\x59\xc4\x77\xd8\xc2\x23\xb6\x85\xd2\x13\x34\xa7\x3a\xd3\xa2\x32\x42\xc9\xc0\xe5\x50\x00\x88\x1a\x10\x76\x1a\xab\x1c\xd4\x16\x4c\x4e\x40\xd2\x08\x4d\xf0\x2a\xd5\x5e\xc2\x9b\xa8\xc5\x4b\x41\xb0\x53\xd0\x48\xf1\x46\xba\xa6\x38\x8d\x58\xe2\x1b\x64\x2f\x8a\xb7\x69\x14\x31\x2e\xde\xd2\xdb\xd5\x25\xd8\x36\x6f\x57\xd0\xf7\x2c\xb1\x52\xc4\xf2\x8b\xf4\x01\xb3\x57\xdc\x11\xac\x95\x32\x9e\x18\x06\xc1\x92\xfc\x22\xf5\xbe\x4f\xeb\xfb\x4b\x60\x08\xb9\xa6\xed\x22\xb6\xcc\xd3\xfa\x1e\xfa\x3e\x06\x27\x48\xb5\x55\x45\xa1\xf6\x71\xfa\xf1\x88\x25\x98\x8e\x59\xce\x66\x33\x70\x71\x7e\x62\x49\x3e\x87\x3d\x1d\xea\x80\xd9\x2c\xa4\x7e\xed\x25\x69\x8f\xb9\xe3\x11\x67\x4f\xcf\xcb\x8d\x07\x9e\x97\x9b\xa0\x1d\xfb\x7b\x23\x74\x6d\xa0\x26\x92\x9e\x70\xf6\x86\x48\x5e\x99\xb0\x71\x9d\x46\x51\xd7\x81\xd8\xc2\x7c\x85\x06\xa1\xef\xbd\xbb\x35\xe6\x6b\xaa\x94\xf7\x3e\x98\x47\x59\x9c\xbe\x54\x65\x29\x4c\x1d\x90\x83\x32\x05\x5f\x6b\x94\x59\x4e\x21\x3d\x4a\x53\xf8\x23\xee\x42\xd4\x9a\x93\x51\x5b\xf3\x39\xa4\xb5\xa7\xc0\x1b\xa5\x5f\x43\xd0\xd9\x53\xe0\x9a\x90\xdb\xb7\xc4\x2a\xed\xef\x45\xa0\x3a\xde\xea\xe1\x18\xbb\x0e\x48\x72\x3b\xc0\x71\xa0\xb7\x65\xa5\xb4\x21\x7e\xdd\xba\xb1\xe6\xff\xa7\xa3\x02\xd7\xad\x35\x23\xd6\x14\xce\x51\xa3\xdc\x11\x9c\x8b\xb2\x82\xcb\xc5\xb1\xa3\xbb\x2b\x85\x48\x0f\x8b\x97\x74\x9d\x67\xfb\xde\xad\xda\x70\xf6\xab\x56\x88\xb0\x14\x96\x34\xc5\x69\x7d\x36\xf7\x52\xe3\xbe\x80\xef\xa2\x36\x4a\xb7\x2c\xb1\xd5\x04\x85\xf0\xf7\xff\xe0\x3c\x73\x88\x2d\x68\xc0\x0e\xdb\x31\xd8\xbf\x5d\x72\xfe\x0e\x7d\xff\x07\x56\x8d\x46\x7b\x7f\xdd\x70\xbd\xef\x7c\xd4\x8e\x06\x3c\xe5\xbe\x31\x68\x5b\x0e\xbd\xef\xd4\xcb\xa0\x7e\xda\xd9\x7f\x45\xb8\x11\x52\xd4\xf9\x49\x88\x51\xfe\x52\x8c\x4d\x93\x65\x44\xfc\xb4\x8e\x51\xff\x42\x8c\x1f\x54\xd7\xb8\x1b\xd6\xf1\x23\xc4\x28\x1f\xdd\xbe\xf0\xb5\x24\xfe\x43\xc5\x12\xff\x7d\xfe\x1b\x00\x00\xff\xff\x21\xe6\xc4\x0d\xb7\x05\x00\x00")

func packageTplBytes() ([]byte, error) {
	return bindataRead(
		_packageTpl,
		"package.tpl",
	)
}

func packageTpl() (*asset, error) {
	bytes, err := packageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.tpl", size: 1463, mode: os.FileMode(436), modTime: time.Unix(1529560659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tpl": indexTpl,
	"list.tpl": listTpl,
	"package.tpl": packageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tpl": &bintree{indexTpl, map[string]*bintree{}},
	"list.tpl": &bintree{listTpl, map[string]*bintree{}},
	"package.tpl": &bintree{packageTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

