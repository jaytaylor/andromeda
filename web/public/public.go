// Code generated by go-bindata.
// sources:
// index.tpl
// list.tpl
// package.tpl
// subpackage.tpl
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x73\xe3\xb6\x11\xfe\xee\x5f\xb1\xc7\x4b\x47\x3a\xdd\x89\x94\xef\x7a\x6d\x86\x26\xd9\xf1\x39\x4e\xaf\x9d\x4b\x9a\xb1\x9d\xe9\x74\xd2\x7c\x80\x88\x15\x89\x18\x04\x58\x00\x94\xec\x7a\xf4\xdf\x3b\xe0\x9b\x28\xbe\xc8\x4e\x26\xe5\x07\x5b\x02\xf6\xe5\x79\x76\x17\xab\x25\x82\x57\x54\xc6\xe6\x31\x47\x48\x4d\xc6\xa3\xb3\xa0\xf9\x87\x84\x46\x67\x00\x00\x81\x61\x86\x63\x74\x29\xa8\x92\x19\x52\x12\x78\xd5\x42\xb5\x99\xa1\x21\x10\xa7\x44\x69\x34\xa1\x53\x98\xcd\xf2\x6b\xa7\xbb\x25\x48\x86\xa1\x43\x0a\x93\x4a\xe5\x40\x2c\x85\x41\x61\x42\xe7\xef\xe4\x11\xee\xc8\x23\x97\x6a\x44\x9a\xa2\x8e\x15\xcb\x0d\x93\xa2\xa3\xd2\x02\x00\xa6\x81\x40\xa2\x48\x9e\x82\xdc\x80\x49\x11\x50\x18\xa6\x10\xee\x85\xdc\x09\xd8\x32\xcd\xd6\x1c\x21\x91\x50\x08\xb6\x45\xa5\xd1\x89\xce\x2a\x2f\x95\x61\xb0\x84\x43\xc7\xe0\x83\xf1\x7e\x21\x5b\x52\xad\xd6\x48\xec\xb3\x63\x82\xca\x9d\x2b\x05\x97\x84\x42\x08\x9b\x42\xc4\x16\x0e\xcc\xdf\xc0\x53\x2b\x65\x9f\x2d\x51\x16\xa2\xb8\x18\xac\x6a\x43\x4c\xa1\x21\x04\x2a\xe3\x22\x43\x61\xdc\x04\xcd\x35\x47\xfb\xf1\xd3\xe3\xdf\xe8\x7c\x56\x49\xcc\xde\x0c\x75\x33\x9d\x9c\x52\xcc\x74\x32\xa6\xc5\xe5\x49\x2d\x2e\x07\x5a\x2d\x2f\x92\xe7\x28\xe8\x17\x99\xcc\x99\xc1\xac\x4f\xb2\x71\x40\xe5\x6d\xac\x24\xe7\x10\x5a\x5f\xae\x2e\xbf\xdc\xc9\x1c\xa2\xce\xf7\xcf\xc8\x92\xd4\xc0\xb2\x5c\x8a\x39\x43\x61\xda\xa5\xf3\x8b\x81\x5d\x2b\x55\x79\xbf\x4a\x19\xa7\x95\xff\xa1\x18\xdb\xc0\xbc\x71\x3f\x06\xaf\x31\x75\xc0\x14\xbe\x04\xd3\xd0\xd1\xfe\x6c\xfa\x9b\xb7\x98\x0c\xee\x46\xaa\x6c\xf6\xc6\x95\x42\x17\xeb\x8c\x99\x93\x35\xd3\xf0\x79\x65\x0b\x67\x8a\x8c\x42\x53\x28\x01\x1b\xc2\x35\x3e\x87\xb2\x35\x98\xe9\xc4\xdd\x12\x5e\xe0\xef\x65\xd5\x22\x74\x35\x0a\x3a\x3f\x98\x1e\xea\xb5\x7b\x10\xc2\x6c\x36\xdc\x9f\xf6\xba\xbf\x58\x78\x67\x7d\x1a\xd5\xe9\xfb\x69\xf6\x4f\x5c\xdf\xca\xf8\x1e\xcd\xec\xe7\xa9\x8a\xcc\x95\x34\xd2\x7a\x4d\x8d\xc9\xb5\x3f\x83\xb0\x73\x00\xb8\x8c\x89\xcd\x80\x5b\x4a\xc5\x92\xc3\x5f\x60\xb6\xd3\x7a\x06\xbe\xfd\x3f\x02\xd4\x9a\xdc\xe9\x2b\x29\x04\xc6\xdd\x1c\x8e\xa6\xd0\x3e\xd5\x11\x76\x99\x10\xa8\x3e\xdf\x7d\xf7\xc5\x42\x09\xd6\x51\x6d\x81\x89\xc4\x75\x03\x6f\x1d\xcd\x2e\xce\x46\xd5\x6d\x78\x21\x04\x81\x3b\x68\xc9\xce\x2b\x4e\x6f\x61\xe6\x7b\xde\x0c\xde\x8e\xf0\x49\xa5\x36\x56\xc0\xdb\x0d\xba\xc7\x51\xe2\xa4\x90\x39\x8a\x2e\x0f\xdc\x9a\x29\x2a\xb5\x96\x96\x1c\x5d\x2e\x93\x52\x74\xdc\xf6\xf3\xc4\x91\xd6\xac\xc7\x54\xf7\xe3\xcb\xde\xa2\xc6\x8c\x4a\x49\xf5\x7f\x01\x6d\xd3\x6b\xfb\x4b\xb7\x4b\xc6\x0a\x89\xc1\xfa\x2c\xcf\x67\x94\x6d\xa7\x42\x6a\x1f\xab\x3d\x20\x7d\x7d\x73\xf3\x8f\x1b\x1f\x6c\xae\x70\x5b\x26\xe6\x04\x7b\xfb\xf4\xba\xed\x54\x98\x7a\x47\xa3\xc3\xd7\x86\x29\xe6\x52\xe3\xaf\x08\xd3\x33\xa5\x2a\x05\x94\x16\xa9\xfb\x0c\x78\x8d\xe6\x8e\x65\x28\x0b\x33\x6f\x8f\xca\x3b\x38\x5f\xad\x56\xab\x49\x26\xa7\x78\x64\xa8\x35\x49\x7e\x0d\x93\xf2\x17\xb2\xd2\xb2\xbf\xaf\xb8\x35\x2e\x25\x86\xb8\x3a\xe7\xcc\xcc\x67\xff\x16\xa7\x32\xb8\x91\x0a\xe6\x65\x21\x40\x08\xab\x0b\x60\x10\xb4\xc6\x5c\x8e\x22\x31\xe9\x05\xb0\xb7\x6f\x4f\x01\x80\xdf\xa5\x96\xe0\xa8\x9e\xee\xf0\xc1\x76\x9c\x06\xca\x4f\xec\xe7\xd3\x9a\x2f\xaa\x21\x18\x6d\xea\x30\x9e\x93\x91\xa5\x36\xc1\xf3\x9e\x83\x3d\x20\xd7\x38\xd1\x94\x7f\x5b\x58\x46\x8f\xd6\xbf\x64\xa1\x60\xad\xe4\x4e\xa3\x1d\x3f\x50\x83\x90\x06\x74\x91\xe7\x52\x99\x43\xcf\xd4\x53\x45\x7b\x32\x4a\x87\xc8\xd4\xd4\x03\xaf\x9a\x04\xeb\x91\x54\x9b\x47\x8e\xdd\x59\x31\xd6\xba\x33\x24\x7a\x0b\x3b\x2b\xf7\x62\x20\xb7\xa8\x36\x5c\xee\x7c\x48\x19\xa5\xd8\x99\x0b\xf7\x9d\xe3\xfc\x5a\x1b\x85\x24\x5b\xda\xe1\x96\x30\x81\xaa\x67\x25\x27\x94\x32\x91\xf8\xb0\x3a\x46\x9c\x11\x95\x30\x31\x58\xde\x31\x6a\x52\x1f\xbe\x5e\xad\xf2\x87\xe3\x9d\xb4\x9c\x72\x7c\x78\xff\x71\xb0\xb5\x26\xf1\x7d\xa2\x64\x21\xa8\x6f\x87\xe9\xc7\x0e\xd2\x03\x4e\x3b\x52\x3e\x4d\xaa\xed\x52\x66\xf0\x45\x08\x3b\x84\xc0\x5b\xac\xdc\x8f\x98\xc1\xe0\x6f\xbf\xe1\xfd\x26\x5a\x87\x04\x90\xc2\xc8\x51\x52\x76\x56\x9b\x0c\x78\x03\xa8\x86\xf4\x12\x72\xde\x22\x97\x9a\xd9\xce\xe5\x03\x59\x6b\xc9\x0b\x83\x7d\x2e\xde\x62\x2d\x8d\x91\x99\x0f\xe7\x43\xa2\xde\x82\xe3\xc6\xf8\x60\xc9\x8c\xc7\xe0\xc3\x30\x06\xde\x62\x50\x6b\x1d\xdd\x7d\x53\xd0\xb6\x86\xdb\xb7\x9f\xd3\x05\x3d\x52\xce\xde\x62\x23\x85\x59\x6e\x48\xc6\xf8\xa3\x0f\xce\x67\xe4\x5b\x34\x2c\x26\xf0\x3d\x16\xe8\xbc\x83\x76\xe1\x1d\x5c\x2a\x46\xf8\x3b\xd0\x44\xe8\xa5\x46\xc5\x36\x7d\x2e\x47\xa6\x3a\x62\x47\x42\xcb\x1d\xae\xef\x99\x59\x5a\x7c\x4b\xcd\xfe\x8b\x4b\x42\x7f\x29\xb4\xf1\xed\x4f\xcc\x1f\x7a\xb2\x99\x7e\x91\x5c\x2c\xb9\x54\x3e\xbc\xfe\x50\x3e\x63\x35\x41\x7a\xbc\x5b\x8d\x3f\x7f\xbc\xbe\xfc\x74\x6c\xad\xf4\x48\x31\x96\x8a\x54\x39\x17\x52\xe0\xa8\x51\x9f\xc4\x86\x6d\xfb\x6d\x72\xa0\x5f\x08\x8a\x8a\xb3\x71\x23\x45\x3f\x25\x9c\x69\xb3\x2c\x33\xb9\xb4\x99\x9c\x76\xef\x1a\x99\x2f\x05\xd9\x4e\x1e\xe0\x65\xc3\xf2\x7a\x75\xfd\xe9\xdb\x8f\xbd\xf6\x20\x15\x45\xe5\xc3\x79\xfe\x00\x5a\x72\x46\xe1\xf5\x37\xe7\xd7\xe7\xdf\xae\x26\x5d\xe5\x24\xbe\xb7\x3f\xe4\xcf\xbb\x2b\x9f\xbe\x9d\x43\xad\x06\x5e\x75\xfb\x10\xac\x25\x7d\x8c\xce\x02\xca\xb6\x10\x73\xa2\x75\xe8\xd4\x94\x9a\x4b\x83\x82\x1f\xaa\x37\xe0\x2c\x0a\xd2\xf3\x28\x20\x90\x2a\xdc\x84\x8e\xe7\x74\x2f\x2d\x48\x14\x78\x76\xd7\xe3\xac\xa7\xd3\xca\x93\xb5\x2c\x8c\x13\x5d\xda\x7f\x95\x42\x23\x1b\x78\xd6\x53\xe0\x51\xb6\x8d\xce\x82\xf4\x7d\x74\x8b\x44\xc5\x69\xf7\xee\xa1\xb9\x75\xf8\xab\xe4\x44\x24\xf0\x63\x7d\xf3\x10\x78\xe9\x7b\xcb\x44\x59\x5e\x96\x08\xa3\xa1\xd3\xef\xfe\x0d\x9d\xf4\x43\x74\xa5\xc8\x8e\xc3\x6d\x29\x10\x78\xe9\x87\x7a\xc7\x3a\x86\xce\xa8\x56\x0d\x73\x3e\x04\x3a\x27\xa2\xb6\x69\x57\x9c\x28\xf0\xec\x52\x54\x63\x6d\x94\x4b\x11\x2e\x13\xe7\x68\xe3\xd5\x72\x19\x94\xcd\xd0\xee\xda\x0f\x9d\x66\x10\x30\x91\x17\xcd\x4d\x49\xf5\x52\xeb\x40\xf9\x92\x17\x3a\xb7\x28\xa8\x03\xde\x84\xb0\xad\x6f\xa7\x34\x99\xe9\xc4\x01\x7b\x36\x43\xe7\x4f\x7f\x74\xbc\x26\x96\xd6\x53\xb4\x5c\x1e\x02\x5a\x46\xe7\xe9\x09\x76\xcc\xa4\xf0\x15\x27\x06\xb5\x01\x3f\x04\xf7\x4a\x8a\x0d\x4b\xdc\xef\x88\x36\xa8\xdc\x2f\xd5\xc6\x7e\x6f\x65\xd9\xa6\x95\xdc\xef\xcb\xd0\x1e\x82\x58\x0b\x96\xb1\x44\x0a\x3f\x54\x85\xa9\x3b\xf1\x2c\x38\x94\xd5\x16\x3a\xa3\xc7\xc9\x89\xac\x0b\x45\x44\x82\xf0\x55\x7e\x9f\x58\x30\x1d\x6f\xdd\xf2\xb1\x50\x04\xc5\x87\x4a\xce\xb9\x2a\x67\x1d\x7a\x69\x1c\xd8\xef\xe1\x50\x5b\x3d\xb1\x1f\x88\x49\xad\x84\xd3\xd7\x6f\x36\x0e\xf5\xf7\xf4\x04\x28\x68\xe3\xf6\xa8\x12\x0f\x5b\x87\x4f\xdf\x17\xd9\x1a\x15\xc8\x0d\xd4\xe7\x51\x03\x13\x95\x0b\x1f\x9e\x9e\xc0\xfd\xe6\x93\xdb\x04\xe4\x0b\x8a\x32\x78\x36\xfe\x55\xe1\xfd\xa7\xc0\x02\x5b\xb9\x3b\x59\xae\x1e\xc9\xfd\x28\x72\x25\x63\xd4\x1a\x29\xc4\xa5\x8e\x42\x5d\x70\xa3\x5b\xad\x52\xe7\xa6\x5a\xec\x6a\x5e\x56\xcd\x70\x27\xd5\x3d\xaa\x4a\xbc\x62\xde\x4b\xf3\xad\x21\x46\x83\xa3\x30\x93\x06\xb5\x73\x8c\x50\x83\x66\x22\x46\xfb\xe2\x9f\x28\x92\xd9\x83\xa0\x0c\xd2\x67\xad\x95\x50\x6b\x63\x5e\xdd\x57\xbc\xea\xae\xf3\x7f\x01\x00\x00\xff\xff\xc5\x5e\xe5\x7a\x03\x15\x00\x00")

func indexTplBytes() ([]byte, error) {
	return bindataRead(
		_indexTpl,
		"index.tpl",
	)
}

func indexTpl() (*asset, error) {
	bytes, err := indexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tpl", size: 5379, mode: os.FileMode(436), modTime: time.Unix(1535232283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\x6f\x66\xc7\x75\xb9\x8e\xe1\x18\x76\xdd\xa9\x87\xfd\x01\x35\x56\x63\xd3\x44\x0e\x8e\xda\x11\x4c\xfe\xfb\x68\xc3\x4a\x07\x3b\xd9\x42\xef\x7b\xd2\x93\x7b\x0a\xb9\xd3\x65\x62\x44\x1d\x07\x6f\xdc\xef\xc3\x14\xbc\x01\x00\xa7\x49\x07\xf6\xb5\x62\x60\xc1\x2b\xd6\x15\x7b\xea\x4e\xd4\xf3\x8c\x1d\x3e\x24\x94\x3c\x72\x20\xd7\x6c\xba\x8d\x19\x59\x09\x5d\xa4\x32\xb3\xb6\xf6\xac\xc7\xdd\x9b\x7d\x6c\x09\x8d\xdc\x5a\x3a\x6b\xcc\xc5\xa2\xcb\xa2\x2c\xda\xda\x4f\x5a\xf0\x45\xcb\x90\xcb\x3f\xea\xc0\x73\x57\xd2\xa4\x29\xcb\x03\x72\x5f\x00\x69\x06\xa1\x2f\x34\x45\xe4\x23\x34\x32\x58\x34\x15\xc6\x49\xf2\xb7\xe0\x92\xe6\x74\x18\x18\x7d\xc6\x59\xd2\x85\xcb\xcc\xd6\x1b\xd7\x6c\x49\xdd\x21\x87\xc5\x1b\x53\x2b\x0a\x49\xcf\x78\x9e\x4e\xfd\x9e\x34\xbe\xdc\x7e\x78\x6f\x6f\xd1\x8d\x23\xc4\xc2\xc7\xd6\x36\xb5\xde\x35\x58\x57\xeb\xff\xd6\xae\xa1\xab\x69\xf1\x57\x47\x96\x70\x65\x8d\x6b\xb6\x29\xae\xd9\xae\xfc\x13\x00\x00\xff\xff\x59\xb1\xc1\x65\x7d\x01\x00\x00")

func listTplBytes() ([]byte, error) {
	return bindataRead(
		_listTpl,
		"list.tpl",
	)
}

func listTpl() (*asset, error) {
	bytes, err := listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.tpl", size: 381, mode: os.FileMode(436), modTime: time.Unix(1529871495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\x0a\x39\xec\x02\xb1\xd5\x20\x39\x14\x86\x2c\x20\x1f\x08\x9a\xa0\xcd\x1a\x71\xba\x3d\x14\x3d\xd0\xd2\xd8\x22\x2c\x91\x02\x49\xc5\x31\x5c\xfd\xf7\x82\x1f\xa2\x29\xcb\x59\x04\xe8\xee\x25\x11\x67\xde\xcc\x3c\x3e\x92\x43\x7a\xbf\x87\xb3\x7a\xb3\x86\xe9\x0c\x26\xd0\xb6\xa3\xe4\x53\xce\x33\xb5\xab\x11\x0a\x55\x95\xe9\x28\xe9\xfe\x21\xc9\xd3\x11\x00\x40\xa2\xa8\x2a\x31\xdd\xef\x61\x32\x27\xaa\x80\xb6\x85\x31\x5c\xb3\x5c\xf0\x0a\x73\x92\xc4\xd6\x6d\xa1\x15\x2a\x02\x59\x41\x84\x44\x35\x8b\x1a\xb5\x1a\xff\x1a\x85\x2e\x46\x2a\x9c\x45\xa4\x51\x05\x17\x11\x64\x9c\x29\x64\x6a\x16\x3d\x92\x1d\xbc\x90\x5d\xc9\xc5\x09\x74\x8e\x32\x13\xb4\x56\x94\xb3\x20\xc4\x13\x00\x2a\x81\xc0\x5a\x90\xba\x00\xbe\x02\x55\x20\x20\x53\x54\x20\x6c\x18\xdf\x32\x78\xa5\x92\x2e\x4b\x84\x35\x87\x86\xd1\x57\x14\x12\xa3\x74\x94\xc4\x76\x82\xc9\x92\xe7\xbb\x74\x34\x4a\x8a\x0b\x33\xc3\x67\xac\xf9\x13\xa9\x10\xda\x36\x89\x8b\x0b\xed\xc9\xe9\x6b\x3a\x4a\x08\x14\x02\x57\xb3\x28\x8e\xd2\x38\x89\x49\x3a\xda\xef\x41\x10\xb6\x46\x38\xab\x89\x40\xa6\x8c\x36\x5a\xd5\xb9\x1f\x4a\x23\xb0\x8f\x34\xd2\x7b\x67\x27\x66\x94\x1e\xd9\x7d\x79\x5b\x04\x59\x6e\xd2\xc4\x96\x47\x21\x3a\x4e\x0f\x77\x53\xd0\x94\x1f\xee\x0c\xda\xba\x3f\x8d\xc7\x49\x71\x99\xce\x49\xb6\x21\x6b\x84\x67\xce\x95\x45\xb9\x6a\x49\x5c\x5c\xa6\xe3\x71\x6a\x53\xe8\xd9\x4a\xaa\xb8\xd8\x39\xa4\x27\xab\x43\xfe\x7c\xfe\x5d\xf3\x03\x63\x60\x7c\xc5\xcb\x92\x6f\x0d\x5d\xe7\xd2\x14\x5d\xe1\xfd\x1e\xb6\x54\x15\x70\xb6\xc5\xa5\x76\x4e\x67\x66\x9b\x4d\xfe\xb2\xc3\xb6\xd5\x08\xba\x02\x86\x1e\x62\xfc\xce\x69\xd8\x2c\x78\x23\x32\x84\x8c\xe7\x08\x5b\x5c\x42\x49\xd9\xa6\x4f\xa9\x0b\xed\x54\xf3\xc3\x3e\x13\x27\xd9\xe1\xcb\xe8\x02\xa6\x88\x56\xd7\x2a\xe2\x75\xd6\x66\x30\x9a\x78\xd4\xd7\x2d\x43\x61\x61\xe6\xf3\x08\xa7\xbf\xbe\xdd\x2e\x2c\xe0\xdb\xed\x22\x58\x00\xfd\xf7\x9e\x0a\xa9\x40\x22\x32\x8b\x30\xe3\x05\x22\xbb\x56\x47\xc8\xc3\xe6\x78\xbd\x88\x83\x65\x8a\xd2\xc7\xc5\xd7\xa7\x60\x56\x7d\x74\xa1\x54\x2d\xa7\x71\xbc\xe6\x39\xcf\x26\x5c\xac\xfb\xb1\x77\x3c\x6b\x2a\x64\x8a\xe8\x33\x13\x26\xb1\x9b\x27\xd8\x1f\x0f\x6c\xc5\x45\xe5\x70\xc5\x65\xea\x56\x69\x72\x47\x14\xf1\xeb\xa2\x07\xe6\x60\xd8\xd9\xf8\xe1\xd1\x5c\x8c\xfd\x96\x57\x15\x55\x32\x40\x3a\xcb\x29\xf0\x8d\x20\x2c\x2b\x30\x44\x77\xa6\x53\xf0\x17\xb2\x0e\xa1\x7a\x78\x32\xeb\x4e\xa1\x7c\xe1\x8a\x94\x01\x78\x2e\x50\xa9\xdd\xc1\x75\x2a\xf0\x9e\x8b\x4d\x58\xc0\x8c\x0f\xc0\x4e\x9b\x87\xaa\xe6\x42\x61\x7e\xb3\x33\x0a\x69\x4d\x93\xe2\x2a\xed\xcc\x70\xb3\xd3\x29\x4a\x64\x47\x50\xa8\xad\xe8\x27\x9c\xff\x42\x5d\x36\x82\x94\x10\x45\x10\xc9\x48\xd7\x2c\xae\xd2\x51\xd2\x94\x61\x9f\xa1\x55\x7d\x0e\x67\x02\x57\xd2\xf4\x99\x3e\x0f\xd3\x35\x4b\x9a\xf6\xdb\x0d\xad\x6a\x7f\x58\xec\x37\x7c\x76\xf5\x4d\xa2\xc9\xb3\xce\xd6\xb6\xfa\x8c\xa3\x40\x96\xe1\xd0\x3b\x24\xf7\xc5\xee\xa9\x92\xf6\x1b\x94\x63\xdb\x9d\x39\xdf\x12\x48\x59\x5a\xae\xd2\xb7\x05\xa3\xef\xf5\xc1\xee\xfb\xc3\x5a\xc1\x67\x53\xff\x10\xf4\x05\x7e\x39\x08\xed\xf6\xf1\x55\x7a\x5d\x96\xe0\x00\x49\xec\xc4\x02\xa9\x76\x25\xce\xa2\x92\x4a\x35\x36\xdf\x63\x7d\xb3\x4d\x81\x71\xa6\x9b\x7e\x4f\x4a\xc3\x85\xf4\x28\x7c\x54\xc3\xf7\xa7\xff\xbd\x1e\x14\xea\xf1\x82\x52\xbd\xa7\x49\xe8\x3b\xa9\x4b\x00\x78\x5f\x1b\x0d\xfa\x31\x02\x1d\xf1\xf9\xb9\x22\x05\x32\xc9\x66\x39\xb7\x0f\x15\xca\x72\x7c\x73\x87\x72\xd1\x2c\x5d\xf3\x92\x7a\x43\x7a\x81\x1c\x7c\x12\x30\x3d\x52\xe5\xff\x8b\x31\x2c\xf1\x13\xc4\x70\xf3\x21\x2c\xf7\x12\x74\x85\x9f\x91\xe4\xe6\xce\x0a\xa6\xe6\xba\xb1\x76\x4c\x21\xa9\x85\x79\xa8\x0d\x02\x92\x58\x7b\xbe\x23\xfc\xa0\xfe\x50\xed\x43\xb3\xbb\x4c\xbb\x1e\x76\x02\x04\x4f\x28\x75\x1b\x9c\xf7\xbb\xdd\x00\x39\x6c\x2b\x53\x7f\x05\x39\xdd\xed\x2c\xf4\xb5\x76\x1e\x6e\x87\x30\x8d\xed\xeb\xc3\x77\xd6\x21\xd4\xaf\x44\xcf\x64\x5e\x57\xc9\x52\xbc\xf7\x5e\xe8\xba\xfa\xad\x20\xdb\x12\x7e\xa3\x52\x3f\x92\xec\xd6\x09\xf6\x45\xfe\x76\x0e\x67\x99\x81\x68\x5e\x0e\xe6\x2f\x4e\x37\xfe\xdb\xec\x83\xfc\x0d\xda\xf6\x1f\xb8\x6b\x84\xb9\x6e\xcd\x3d\x63\x63\x27\x9d\xed\xe8\x52\x3a\x15\xbe\x50\x44\xf7\xfc\x30\xfa\x91\x2f\x9d\x75\xf0\xbc\x38\x95\xe1\x9e\x32\x2a\x8b\x41\x8a\xce\xfc\xa1\x1c\x8b\x26\xcb\x10\xf3\x21\x8f\xce\xfe\x81\x1c\x7f\xa0\x94\x7a\x05\x8f\x52\x74\xe6\x43\x86\xe0\xc4\xd8\xf7\x4b\x6c\xdf\xec\x49\x6c\x7f\xaa\xfc\x17\x00\x00\xff\xff\x2a\x9d\x7b\x70\xd2\x0c\x00\x00")

func packageTplBytes() ([]byte, error) {
	return bindataRead(
		_packageTpl,
		"package.tpl",
	)
}

func packageTpl() (*asset, error) {
	bytes, err := packageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.tpl", size: 3282, mode: os.FileMode(436), modTime: time.Unix(1533014847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _subpackageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6b\xeb\x38\x14\xdd\xfb\x57\xdc\x31\x6f\x39\xb1\x79\xb4\x8b\x21\x28\x86\xb6\xa1\x4c\x0a\x33\x84\xa6\xbb\x61\x16\x8a\x75\x63\x89\xd8\x92\x91\xe4\xb6\xc6\xe4\xbf\x0f\x92\xec\x44\x71\xc3\xd0\xc5\xdb\xb4\xf1\xd1\x3d\x47\xe7\x7e\xd9\xe4\x37\xa6\x4a\xdb\xb7\x08\xdc\x36\x75\x91\x90\xe9\x1f\x52\x56\x24\x00\x00\xc4\x0a\x5b\x63\x31\x0c\x90\x6d\xa9\xe5\x70\x3a\xc1\x02\x1e\x24\xd3\xaa\x41\x46\x49\x1e\x8e\x43\x68\x83\x96\x42\xc9\xa9\x36\x68\x57\x69\x67\x0f\x8b\x3f\xd2\xf8\x48\xd2\x06\x57\x29\xed\x2c\x57\x3a\x85\x52\x49\x8b\xd2\xae\xd2\x17\xda\xc3\x1b\xed\x6b\xa5\x6f\x44\x33\x34\xa5\x16\xad\x15\x4a\x46\x94\xb3\x01\x10\x06\x28\x54\x9a\xb6\x1c\xd4\x01\x2c\x47\x40\x69\x85\x46\x38\x4a\xf5\x21\xe1\x5d\x18\xb1\xaf\x11\x2a\x05\x9d\x14\xef\xa8\x0d\xa6\x45\x42\xf2\x90\x20\xd9\x2b\xd6\x17\x49\x42\xf8\xcf\x38\x43\x92\xf3\x9f\x0e\x65\xe2\xbd\x48\x08\x05\xae\xf1\xb0\x4a\xf3\xb4\xc8\x49\x4e\x8b\x64\x18\x40\x53\x59\x21\xfc\x68\xa9\x46\x69\x3d\x6b\xb9\x82\x6c\x7b\xac\xb2\xed\x19\x32\x67\xbd\x48\x63\x18\x62\xd6\x14\x90\x16\x33\xfc\x6f\xda\xa0\x37\x12\xae\x43\xc9\xbc\x4c\x1e\x1c\x71\xed\x3d\xdf\x15\xe1\x32\xd8\xd2\xf2\x48\x2b\x24\x39\xbf\x2b\x82\xeb\xcd\x7a\x09\x3e\xa1\x63\x95\x6d\xd6\x5e\x29\x50\xdd\xdf\x1d\xe2\x12\xae\x2c\x8d\xce\x2f\x5e\x62\xc0\x99\x88\xe9\x67\x26\xb7\xb6\x35\xcb\x3c\xaf\x14\x53\x65\xa6\x74\x95\x47\x35\x4c\x8b\xb5\x2a\xbb\x06\xa5\xa5\xae\x77\xb1\x48\x64\xdf\xfb\x86\x8d\x3c\x28\xdd\x8c\x71\x2e\x87\x61\x00\x71\x08\x26\xd6\xd4\x52\x9f\xbb\xe3\xba\x87\xec\x15\x5b\x75\xc9\xee\x0c\xcd\x92\xf4\xf8\x93\x6a\x1a\x61\xcd\x2c\x7a\x44\x6f\x11\x1e\x35\x95\x25\xc7\x39\x63\x82\x6f\x51\xde\x68\x35\x0f\x77\xd0\x4d\xf5\xde\xa2\x79\x53\x96\xd6\x33\xc2\x56\xa3\xb5\xfd\xe5\xf8\x16\xf9\x59\xe9\xe3\xfc\x22\x8f\x5d\x82\xa7\x89\xe5\xf7\xc5\xa6\x69\x95\xb6\x86\xe4\xfc\xbe\x48\x48\x57\x83\xb1\x7d\x8d\xab\xb4\x16\xc6\x2e\xfc\xef\x85\x5b\xfb\x25\x48\x25\xdd\x46\x5c\x66\x5a\x34\xad\x1f\xe6\x5d\xb7\xcf\x46\x15\x57\x7f\xbf\x97\xb5\x28\xae\x47\xd9\x05\x4f\xe3\x1b\x7e\x87\x46\xd7\xe2\x7a\x6e\x3b\xf7\x52\x09\x26\x2f\xf0\xd4\x66\x77\xd3\x2b\x52\xe6\x47\x3e\x8c\x47\xdc\x6d\x77\xb0\x04\xd2\xea\xf0\x16\xba\x8a\x26\xb9\x83\xbf\x28\x87\x11\x8b\xf5\x43\x26\xc8\x1e\xfb\x70\x3e\x55\x08\x19\x3c\xf6\x64\x2c\xd2\xff\x97\x61\x22\xff\x82\x4a\x38\x7b\x51\x1d\xdc\xfd\x4f\x9a\x7e\xd4\xf0\xa7\x30\x56\xe9\x3e\xb4\x2d\x32\xc3\x3e\x7f\x87\x1f\xa5\x0f\x71\xa6\xc6\xb0\xf3\x5e\x8c\xcf\xff\xf8\xcb\xd9\x27\x9c\x4e\xff\xc2\xba\xd3\x7e\xa3\xfc\xc8\x04\x6e\x36\x61\xb3\xf9\xba\x45\xdf\x59\xea\x52\x8e\xd9\x2f\x6a\x3f\xa2\x0f\xf6\x1b\x0a\xcf\x42\x0a\xc3\xbf\x48\x4c\xf0\xb7\x34\x76\x5d\x59\x22\xb2\xaf\x3e\x26\xfc\x1b\x1a\x7f\xa1\x31\xb4\x1a\x77\xfa\x22\x31\xc1\x91\xc2\xbc\x2d\x79\xf8\x3c\x90\x3c\x7c\x15\xff\x0b\x00\x00\xff\xff\x5c\x2e\x02\xd5\x2d\x07\x00\x00")

func subpackageTplBytes() ([]byte, error) {
	return bindataRead(
		_subpackageTpl,
		"subpackage.tpl",
	)
}

func subpackageTpl() (*asset, error) {
	bytes, err := subpackageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subpackage.tpl", size: 1837, mode: os.FileMode(436), modTime: time.Unix(1531357019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tpl": indexTpl,
	"list.tpl": listTpl,
	"package.tpl": packageTpl,
	"subpackage.tpl": subpackageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tpl": &bintree{indexTpl, map[string]*bintree{}},
	"list.tpl": &bintree{listTpl, map[string]*bintree{}},
	"package.tpl": &bintree{packageTpl, map[string]*bintree{}},
	"subpackage.tpl": &bintree{subpackageTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

