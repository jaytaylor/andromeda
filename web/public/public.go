// Code generated by go-bindata.
// sources:
// index.tpl
// list.tpl
// package.tpl
// subpackage.tpl
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6d\x73\xdb\xb8\x11\xfe\xee\x5f\xb1\x61\xd2\x4a\x51\x22\x52\x4a\x9a\xe9\x0d\x4d\xa9\xe3\xf8\x7c\x4d\x3b\xbe\xf4\x1a\xbb\xd3\xe9\xa4\x99\x0e\x44\xac\x48\x9c\x41\x2c\x0b\x80\x92\x5d\x8f\xfe\x7b\x07\x24\x25\x51\x24\x25\xfb\x3a\x57\x7e\xb0\x2c\xec\xeb\xf3\xec\x62\x09\x21\x7a\xc1\x29\xb6\x0f\x39\x42\x6a\x33\x39\x3f\x8b\xb6\x1f\xc8\xf8\xfc\x0c\x00\x20\xb2\xc2\x4a\x9c\x5f\x28\xae\x29\x43\xce\xa2\xa0\x5a\xa8\x84\x19\x5a\x06\x71\xca\xb4\x41\x3b\xf3\x0a\xbb\x1c\x7f\xe7\x35\x45\x8a\x65\x38\xf3\x58\x61\x53\xd2\x1e\xc4\xa4\x2c\x2a\x3b\xf3\xfe\xcc\x1e\xe0\x96\x3d\x48\xd2\x3d\xda\x1c\x4d\xac\x45\x6e\x05\xa9\x86\xc9\x2e\x01\x10\x06\x18\x24\x9a\xe5\x29\xd0\x12\x6c\x8a\x80\xca\x0a\x8d\x70\xa7\x68\xad\x60\x25\x8c\x58\x48\x84\x84\xa0\x50\x62\x85\xda\xa0\x37\x3f\xab\xa2\x54\x8e\xc1\x01\x9e\x79\x16\xef\x6d\xf0\x33\x5b\xb1\x6a\xb5\xce\xc4\x3d\x6b\xa1\x38\xad\x7d\x52\x92\x18\x87\x19\x2c\x0b\x15\xbb\x74\x60\xf8\x1a\x1e\x77\x5a\xee\x59\x31\x0d\x19\xbb\xbf\xa6\xe4\x5a\x28\x34\x30\x83\xe9\xef\xce\x3b\x1a\x31\x29\xd5\x5d\x35\x96\xd9\xc2\x99\x70\x8a\x8b\x0c\x95\xf5\x13\xb4\x57\x12\xdd\xbf\x1f\x1f\xfe\xc4\x87\x83\x4a\x63\xf0\xba\x6b\x9b\x99\xe4\x94\x61\x66\x92\x3e\x2b\x49\x27\xad\x24\x75\xac\x76\xc8\x59\x9e\xa3\xe2\xd7\x94\x0c\x85\xc5\xac\x4d\xc3\x36\x00\xa7\x9b\x58\x93\x94\x30\x73\xb1\x7c\x53\x7e\xb9\xa5\x1c\xe6\x8d\xef\x9f\x50\x24\xa9\x85\x71\xb9\x14\x4b\x81\xca\xee\x96\xa6\xe7\x1d\xbf\x4e\xab\x8a\x7e\x99\x0a\xc9\xab\xf8\x5d\x35\xb1\x84\xe1\x36\x7c\x5f\x7a\x5b\x57\xfb\x9c\x66\xcf\xc9\xa9\x1b\x68\xd3\x1b\xba\xb4\x73\xf9\xd5\x8c\x5e\x52\xa1\x2c\xcc\x9b\xcd\x71\x2a\x2b\x8d\x19\xad\xb0\x02\xb8\x73\xa5\x51\x7d\x9d\x7c\xeb\xc1\x7a\x98\xc2\xe1\xb7\x60\x74\xb4\xbe\x4b\xd2\xd9\xe0\xb5\x4f\xca\x14\x8b\x4c\xd8\x93\x8d\xbd\xc5\xf5\xc2\xf5\xee\xb1\xcc\x35\xda\x42\x2b\x58\x32\x69\xf0\xb9\x44\xbd\xc8\x4c\xe2\xaf\x98\x2c\xf0\xd7\xf2\xea\x32\xf4\x0d\x2a\x3e\xdc\xbb\xee\xda\xed\x64\x30\x83\xc1\xa0\x2b\x3f\x1e\x75\x73\x3e\x0a\xce\xda\x30\xaa\x11\xf1\x75\xf0\x77\x5c\xdc\x50\x7c\x87\x76\xf0\xed\xd8\xa6\xc8\x35\x59\x72\x51\x53\x6b\x73\x13\x0e\x60\xd6\xd8\x83\x92\x62\xe6\x2a\xe0\x97\x5a\x31\x49\xf8\x03\x0c\xd6\xc6\x0c\x20\x74\x9f\x3d\x89\x3a\x97\x6b\x73\x49\x4a\x61\xdc\xac\x61\x6f\x09\xdd\x53\x4d\x11\x5f\x28\x85\xfa\xd3\xed\x8f\xd7\x2e\x95\x68\x31\xaf\x3d\x08\x95\xf8\x7e\x14\x2c\xe6\x83\xf3\xb3\x5e\x73\x47\x2f\xcc\x40\xe1\x1a\x76\x60\x87\x15\xa6\x37\x30\x08\x83\x60\x00\x6f\x7a\xf0\xa4\x64\xac\x53\x08\xd6\x9d\x01\x76\x50\x38\x52\x94\xa3\x6a\xe2\xc0\x95\x3d\x06\xa5\xb6\x32\x24\xd1\x97\x94\x94\xaa\xfd\xbe\x9f\x06\x8e\xbc\x46\xdd\x67\xba\xe9\x5f\x0e\x46\x75\xce\xa8\x35\xe9\xff\x4b\xd2\xae\xbc\x6e\xc4\x35\x07\x75\xac\x91\x59\xac\xf7\xf2\x70\xc0\xc5\xea\x18\xa5\xee\x71\xd6\x1d\xd0\x57\x5f\xbe\xfc\xe5\x4b\x08\xae\x56\xb8\x2a\x0b\x73\x02\xbd\x7b\x5a\x03\xff\x18\x4d\xad\xad\xd1\xc0\xeb\x68\x8a\x25\x19\xfc\x05\x34\x3d\xd1\xaa\xa4\xa0\xf4\xc8\xfd\x27\x92\x37\x68\x6f\x45\x86\x54\xd8\xe1\x6e\xab\xbc\x85\xe9\x64\x32\x99\x1c\x45\x72\x0a\x47\x86\xc6\xb0\xe4\x97\x20\x29\x5f\xd2\x95\x95\x7b\xc5\xe3\xca\xfa\x9c\x59\xe6\x9b\x5c\x0a\x3b\x1c\xfc\x53\x9d\xaa\xe0\x92\x34\x0c\xcb\x46\x80\x19\x4c\xce\x41\x40\xb4\x73\xe6\x4b\x54\x89\x4d\xcf\x41\xbc\x79\x73\x2a\x01\xf8\x55\x7a\x09\x0e\xfa\xe9\x16\xef\xdd\xc4\xd9\xa6\xf2\x55\x7c\x3b\x6d\xf9\xac\x1e\x82\xde\xa1\x0e\xfd\x35\xe9\x59\xda\x15\x78\xd8\x0a\xb0\x01\x94\x06\x8f\x0c\xe5\xff\x8d\x96\xde\xad\xf5\x0f\x2a\x34\x2c\x34\xad\x0d\xba\x13\x10\x1a\x50\x64\xc1\x14\x79\x4e\xda\xee\x67\xa6\x39\xd6\xb4\x27\x59\xda\x33\x53\x43\x8f\x82\xea\xb8\x5a\x9f\x9b\x8d\x7d\x90\xd8\x3c\xd0\xc6\xc6\x34\x4e\xb2\xc1\xc8\x1d\xe8\x5b\x1c\xd0\x0a\xf5\x52\xd2\x3a\x84\x54\x70\x8e\x8d\xa3\xe9\xa6\xb1\x9d\x5f\x1a\xab\x91\x65\x63\x77\x02\x67\x42\xa1\x6e\x79\xc9\x19\xe7\x42\x25\x21\x4c\x0e\x33\xce\x98\x4e\x84\xea\x2c\xaf\x05\xb7\x69\x08\xdf\x4d\x26\xf9\xfd\xa1\x24\x2d\x0f\x5a\x21\xbc\xef\x8a\x32\xa1\xc6\xa7\xc4\xec\xfe\x94\x78\xc1\xe2\xbb\x44\x53\xa1\x78\xe8\x7e\x2f\x3c\x34\x70\xee\x51\xba\x33\xf1\xe3\x51\xb3\x75\x2a\x2c\x3e\x0b\x5f\x83\x0e\x08\x46\x13\xff\x03\x66\xd0\xf9\xdb\x1e\x97\x4f\x93\xf2\xee\xc3\x49\x52\xfa\xc4\x0d\x52\x7a\xc4\xfb\xe2\xb3\xc2\x52\x2f\x25\xee\x9c\x78\xb4\xd8\x5b\x38\x35\xa0\xe7\x50\x13\x8c\x72\x32\xc2\x4d\xcd\x10\xd8\xc2\x90\x2c\x2c\xb6\x99\x08\x46\x0b\xb2\x96\xb2\x10\xa6\x5d\x9a\x82\x91\xc4\xa5\x0d\xc1\x81\xe9\x67\xb0\xa7\xfa\xc1\xa8\xd3\xe7\x0d\xdb\xcd\x76\x33\xb9\xfd\xb3\xfb\x79\x78\x7a\x33\xf5\x6c\xa5\x60\xb4\x24\x65\xc7\x4b\x96\x09\xf9\x10\x82\xf7\x09\xe5\x0a\xad\x88\x19\x7c\xc6\x02\xbd\xb7\xb0\x5b\x78\x0b\x17\x5a\x30\xf9\x16\x0c\x53\x66\x6c\x50\x8b\x65\x1b\xcb\x81\xab\x86\xda\x81\xd2\x78\x8d\x8b\x3b\x61\xc7\x2e\xbf\xb1\x11\xff\xc1\x31\xe3\x3f\x17\xc6\x86\xee\xf5\xf6\x9b\x96\x6e\x66\x9e\xa5\x17\x93\x24\x1d\xc2\xcb\xf7\xe5\xd3\xd7\x13\xac\x85\x7b\x67\xf1\xfb\x0f\x57\x17\x1f\x0f\xbd\x95\x11\x39\xc6\xa4\x59\x55\x73\x45\x0a\x7b\x9d\x86\x2c\xb6\x62\xd5\x1e\xd1\x1d\xfb\x42\x71\xd4\x52\xf4\x3b\x29\xda\x25\x91\xc2\xd8\x71\x59\xc9\xb1\xab\xe4\xf1\xf0\xbe\xa5\x7c\xac\xd8\xea\xe8\xf6\x1f\x6f\x51\x5e\x4d\xae\x3e\xfe\xf0\xa1\x35\x5c\x48\x73\xd4\x21\x4c\xf3\x7b\x30\x24\x05\x87\x97\xdf\x4f\xaf\xa6\x3f\x4c\x8e\x86\xca\x59\x7c\xe7\x0e\x11\x4f\x87\x2b\x9f\xb6\x9f\x7d\xaf\x46\x41\x75\x3d\x13\x2d\x88\x3f\xcc\xcf\x22\x2e\x56\x10\x4b\x66\xcc\xcc\xab\x21\x6d\x6f\x55\x0a\xb9\xef\xde\x48\x8a\x79\x94\x4e\xe7\x11\x83\x54\xe3\x72\xe6\x05\x5e\xf3\x56\x87\xcd\xa3\xc0\x49\x03\x29\x5a\x36\x3b\x7d\xb6\xa0\xc2\x7a\xf3\x0b\xf7\x51\x19\x6c\x75\xa3\xc0\x45\x8a\x02\x2e\x56\xf3\xb3\x28\x7d\x37\xbf\x41\xa6\xe3\xb4\x79\x39\xb3\xbd\x96\xf9\x23\x49\xa6\x12\xf8\x5b\x7d\x35\x13\x05\xe9\x3b\x87\x44\x3b\x5c\x0e\x88\xe0\x33\xaf\xfd\xe6\xd9\xc2\x49\xdf\xcf\x2f\x35\x5b\x4b\xb8\x29\x15\xa2\x20\x7d\x5f\x4b\x5c\x60\x68\x1c\x13\xab\x83\x64\x08\x91\xc9\x99\xaa\x7d\xba\x15\x6f\x1e\x05\x6e\x69\x5e\xe7\xba\x35\x2e\x55\x24\x25\xde\x56\xb0\xfd\x28\x13\x7b\x7c\x1c\xc3\x5a\xd8\x14\x5e\xc5\xf6\x1e\xc2\x19\xf8\xb0\xd9\x54\x33\x63\x2f\x92\xcc\xa2\xb1\xa5\xf4\x92\xd4\x52\x24\xfe\x8f\xcc\x58\xd4\xfe\x75\x25\x18\x6f\xf6\xfd\xe0\xac\xc4\x72\x67\xe3\x44\xd1\x3e\x9f\xf4\xfd\xbc\xb6\x29\xd1\x22\x87\x9f\xaa\xd6\x31\x0d\xc4\x85\x84\xb2\x1f\x66\x5e\x6f\xc3\x37\xc6\x56\x15\x10\x34\x53\x09\xc2\xab\xfc\x2e\x71\x39\x36\x43\x37\xab\xfd\xf8\x08\x42\x71\xbc\xaf\x14\xbd\xcb\xf2\x58\xc4\x2f\xac\x07\x9b\x0d\xec\x5b\xa1\xa5\xf6\x13\xb3\xa9\xd3\xf0\xda\xf6\x5b\xc1\x61\xbb\x34\x69\x40\xc5\x61\xb3\xe9\x76\x51\x5b\x67\x9b\x68\xc3\xa6\x55\x00\xbe\x28\xc9\xff\xfe\xa3\x93\x7d\x2e\xb2\x05\x6a\xa0\x65\x95\x0e\x72\xd0\x58\xbe\x85\x48\x0b\x34\xa1\x23\xe4\x15\x5f\xf8\x5b\x62\xaf\x51\x39\xab\xaa\xdc\x55\x8f\xfd\xbb\xc0\x02\x77\x8a\xb7\x54\xae\x1e\x28\x36\x53\xac\xd9\x15\x6f\xe1\xd5\xbf\x5c\x1a\x9f\x61\x3a\x85\xcd\xa6\x03\xd7\x55\x5d\x1c\xb0\xde\x94\xd6\x9d\x84\xaa\x2c\x11\x5f\xf8\x7f\x75\x49\xf8\x2e\xa8\x67\x69\x1c\xbb\x14\xbc\x63\x0e\x0e\x1a\x0b\x55\xa9\xf3\x5b\xb5\x30\xf9\x79\xf7\x6f\xae\x05\x69\x61\x1f\x66\x0e\x9e\x80\xcd\xa6\x02\x2a\x4b\x74\x70\x08\xaf\xaf\x62\xc7\x00\xf4\xc9\xfa\xd6\x1b\x55\xac\x38\xff\x82\xa6\x90\xd6\xd4\xac\x37\xf4\x6a\x4e\x0a\x95\x6b\x8a\xd1\x18\xe4\x3d\xdc\x94\xc4\x8c\x75\xe9\xc3\x83\x49\x19\xca\xe1\x69\x5a\xb5\xa3\xbb\xdf\x06\x4e\x8f\x49\x09\x31\x2b\x92\xd4\x42\x91\x43\xf8\xfa\x78\x8e\xed\xf6\xbb\xa8\xde\x5e\x6b\xd2\x77\xa8\xab\x9e\xaa\x7b\x3f\xb6\xf7\xad\x21\x70\x63\x99\x35\xe0\x69\xcc\xc8\xa2\xf1\x76\x4e\xab\xae\x02\x23\x54\x8c\x90\x6b\x4a\x34\xcb\xdc\xf4\xd2\x16\xf9\xb3\x3c\x96\xd0\x1b\x0e\x9b\x09\x46\x41\xfd\x86\x08\xaa\x6b\xfd\xff\x06\x00\x00\xff\xff\xc3\xf7\xd1\x98\xee\x17\x00\x00")

func indexTplBytes() ([]byte, error) {
	return bindataRead(
		_indexTpl,
		"index.tpl",
	)
}

func indexTpl() (*asset, error) {
	bytes, err := indexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tpl", size: 6126, mode: os.FileMode(436), modTime: time.Unix(1539231402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _listTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6b\xc3\x30\x0c\x85\xef\xfe\x15\x6f\x66\xc7\x75\xb9\x8e\xe1\x18\x76\xdd\xa9\x87\xfd\x01\x35\x56\x63\xd3\x44\x0e\x8e\xda\x11\x4c\xfe\xfb\x68\xc3\x4a\x07\x3b\xd9\x42\xef\x7b\xd2\x93\x7b\x0a\xb9\xd3\x65\x62\x44\x1d\x07\x6f\xdc\xef\xc3\x14\xbc\x01\x00\xa7\x49\x07\xf6\xb5\x62\x60\xc1\x2b\xd6\x15\x7b\xea\x4e\xd4\xf3\x8c\x1d\x3e\x24\x94\x3c\x72\x20\xd7\x6c\xba\x8d\x19\x59\x09\x5d\xa4\x32\xb3\xb6\xf6\xac\xc7\xdd\x9b\x7d\x6c\x09\x8d\xdc\x5a\x3a\x6b\xcc\xc5\xa2\xcb\xa2\x2c\xda\xda\x4f\x5a\xf0\x45\xcb\x90\xcb\x3f\xea\xc0\x73\x57\xd2\xa4\x29\xcb\x03\x72\x5f\x00\x69\x06\xa1\x2f\x34\x45\xe4\x23\x34\x32\x58\x34\x15\xc6\x49\xf2\xb7\xe0\x92\xe6\x74\x18\x18\x7d\xc6\x59\xd2\x85\xcb\xcc\xd6\x1b\xd7\x6c\x49\xdd\x21\x87\xc5\x1b\x53\x2b\x0a\x49\xcf\x78\x9e\x4e\xfd\x9e\x34\xbe\xdc\x7e\x78\x6f\x6f\xd1\x8d\x23\xc4\xc2\xc7\xd6\x36\xb5\xde\x35\x58\x57\xeb\xff\xd6\xae\xa1\xab\x69\xf1\x57\x47\x96\x70\x65\x8d\x6b\xb6\x29\xae\xd9\xae\xfc\x13\x00\x00\xff\xff\x59\xb1\xc1\x65\x7d\x01\x00\x00")

func listTplBytes() ([]byte, error) {
	return bindataRead(
		_listTpl,
		"list.tpl",
	)
}

func listTpl() (*asset, error) {
	bytes, err := listTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.tpl", size: 381, mode: os.FileMode(436), modTime: time.Unix(1529871495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xcc\x0a\x39\xec\x02\xb1\xd5\x20\x39\x14\x86\x2c\x20\x1f\x08\x9a\xa0\xcd\x1a\x71\xba\x3d\x14\x3d\xd0\xd2\xd8\x22\x2c\x91\x02\x49\xc5\x31\x5c\xfd\xf7\x82\x1f\xa2\x29\xcb\x59\x04\xe8\xee\x25\x11\x67\xde\xcc\x3c\x3e\x92\x43\x7a\xbf\x87\xb3\x7a\xb3\x86\xe9\x0c\x26\xd0\xb6\xa3\xe4\x53\xce\x33\xb5\xab\x11\x0a\x55\x95\xe9\x28\xe9\xfe\x21\xc9\xd3\x11\x00\x40\xa2\xa8\x2a\x31\xdd\xef\x61\x32\x27\xaa\x80\xb6\x85\x31\x5c\xb3\x5c\xf0\x0a\x73\x92\xc4\xd6\x6d\xa1\x15\x2a\x02\x59\x41\x84\x44\x35\x8b\x1a\xb5\x1a\xff\x1a\x85\x2e\x46\x2a\x9c\x45\xa4\x51\x05\x17\x11\x64\x9c\x29\x64\x6a\x16\x3d\x92\x1d\xbc\x90\x5d\xc9\xc5\x09\x74\x8e\x32\x13\xb4\x56\x94\xb3\x20\xc4\x13\x00\x2a\x81\xc0\x5a\x90\xba\x00\xbe\x02\x55\x20\x20\x53\x54\x20\x6c\x18\xdf\x32\x78\xa5\x92\x2e\x4b\x84\x35\x87\x86\xd1\x57\x14\x12\xa3\x74\x94\xc4\x76\x82\xc9\x92\xe7\xbb\x74\x34\x4a\x8a\x0b\x33\xc3\x67\xac\xf9\x13\xa9\x10\xda\x36\x89\x8b\x0b\xed\xc9\xe9\x6b\x3a\x4a\x08\x14\x02\x57\xb3\x28\x8e\xd2\x38\x89\x49\x3a\xda\xef\x41\x10\xb6\x46\x38\xab\x89\x40\xa6\x8c\x36\x5a\xd5\xb9\x1f\x4a\x23\xb0\x8f\x34\xd2\x7b\x67\x27\x66\x94\x1e\xd9\x7d\x79\x5b\x04\x59\x6e\xd2\xc4\x96\x47\x21\x3a\x4e\x0f\x77\x53\xd0\x94\x1f\xee\x0c\xda\xba\x3f\x8d\xc7\x49\x71\x99\xce\x49\xb6\x21\x6b\x84\x67\xce\x95\x45\xb9\x6a\x49\x5c\x5c\xa6\xe3\x71\x6a\x53\xe8\xd9\x4a\xaa\xb8\xd8\x39\xa4\x27\xab\x43\xfe\x7c\xfe\x5d\xf3\x03\x63\x60\x7c\xc5\xcb\x92\x6f\x0d\x5d\xe7\xd2\x14\x5d\xe1\xfd\x1e\xb6\x54\x15\x70\xb6\xc5\xa5\x76\x4e\x67\x66\x9b\x4d\xfe\xb2\xc3\xb6\xd5\x08\xba\x02\x86\x1e\x62\xfc\xce\x69\xd8\x2c\x78\x23\x32\x84\x8c\xe7\x08\x5b\x5c\x42\x49\xd9\xa6\x4f\xa9\x0b\xed\x54\xf3\xc3\x3e\x13\x27\xd9\xe1\xcb\xe8\x02\xa6\x88\x56\xd7\x2a\xe2\x75\xd6\x66\x30\x9a\x78\xd4\xd7\x2d\x43\x61\x61\xe6\xf3\x08\xa7\xbf\xbe\xdd\x2e\x2c\xe0\xdb\xed\x22\x58\x00\xfd\xf7\x9e\x0a\xa9\x40\x22\x32\x8b\x30\xe3\x05\x22\xbb\x56\x47\xc8\xc3\xe6\x78\xbd\x88\x83\x65\x8a\xd2\xc7\xc5\xd7\xa7\x60\x56\x7d\x74\xa1\x54\x2d\xa7\x71\xbc\xe6\x39\xcf\x26\x5c\xac\xfb\xb1\x77\x3c\x6b\x2a\x64\x8a\xe8\x33\x13\x26\xb1\x9b\x27\xd8\x1f\x0f\x6c\xc5\x45\xe5\x70\xc5\x65\xea\x56\x69\x72\x47\x14\xf1\xeb\xa2\x07\xe6\x60\xd8\xd9\xf8\xe1\xd1\x5c\x8c\xfd\x96\x57\x15\x55\x32\x40\x3a\xcb\x29\xf0\x8d\x20\x2c\x2b\x30\x44\x77\xa6\x53\xf0\x17\xb2\x0e\xa1\x7a\x78\x32\xeb\x4e\xa1\x7c\xe1\x8a\x94\x01\x78\x2e\x50\xa9\xdd\xc1\x75\x2a\xf0\x9e\x8b\x4d\x58\xc0\x8c\x0f\xc0\x4e\x9b\x87\xaa\xe6\x42\x61\x7e\xb3\x33\x0a\x69\x4d\x93\xe2\x2a\xed\xcc\x70\xb3\xd3\x29\x4a\x64\x47\x50\xa8\xad\xe8\x27\x9c\xff\x42\x5d\x36\x82\x94\x10\x45\x10\xc9\x48\xd7\x2c\xae\xd2\x51\xd2\x94\x61\x9f\xa1\x55\x7d\x0e\x67\x02\x57\xd2\xf4\x99\x3e\x0f\xd3\x35\x4b\x9a\xf6\xdb\x0d\xad\x6a\x7f\x58\xec\x37\x7c\x76\xf5\x4d\xa2\xc9\xb3\xce\xd6\xb6\xfa\x8c\xa3\x40\x96\xe1\xd0\x3b\x24\xf7\xc5\xee\xa9\x92\xf6\x1b\x94\x63\xdb\x9d\x39\xdf\x12\x48\x59\x5a\xae\xd2\xb7\x05\xa3\xef\xf5\xc1\xee\xfb\xc3\x5a\xc1\x67\x53\xff\x10\xf4\x05\x7e\x39\x08\xed\xf6\xf1\x55\x7a\x5d\x96\xe0\x00\x49\xec\xc4\x02\xa9\x76\x25\xce\xa2\x92\x4a\x35\x36\xdf\x63\x7d\xb3\x4d\x81\x71\xa6\x9b\x7e\x4f\x4a\xc3\x85\xf4\x28\x7c\x54\xc3\xf7\xa7\xff\xbd\x1e\x14\xea\xf1\x82\x52\xbd\xa7\x49\xe8\x3b\xa9\x4b\x00\x78\x5f\x1b\x0d\xfa\x31\x02\x1d\xf1\xf9\xb9\x22\x05\x32\xc9\x66\x39\xb7\x0f\x15\xca\x72\x7c\x73\x87\x72\xd1\x2c\x5d\xf3\x92\x7a\x43\x7a\x81\x1c\x7c\x12\x30\x3d\x52\xe5\xff\x8b\x31\x2c\xf1\x13\xc4\x70\xf3\x21\x2c\xf7\x12\x74\x85\x9f\x91\xe4\xe6\xce\x0a\xa6\xe6\xba\xb1\x76\x4c\x21\xa9\x85\x79\xa8\x0d\x02\x92\x58\x7b\xbe\x23\xfc\xa0\xfe\x50\xed\x43\xb3\xbb\x4c\xbb\x1e\x76\x02\x04\x4f\x28\x75\x1b\x9c\xf7\xbb\xdd\x00\x39\x6c\x2b\x53\x7f\x05\x39\xdd\xed\x2c\xf4\xb5\x76\x1e\x6e\x87\x30\x8d\xed\xeb\xc3\x77\xd6\x21\xd4\xaf\x44\xcf\x64\x5e\x57\xc9\x52\xbc\xf7\x5e\xe8\xba\xfa\xad\x20\xdb\x12\x7e\xa3\x52\x3f\x92\xec\xd6\x09\xf6\x45\xfe\x76\x0e\x67\x99\x81\x68\x5e\x0e\xe6\x2f\x4e\x37\xfe\xdb\xec\x83\xfc\x0d\xda\xf6\x1f\xb8\x6b\x84\xb9\x6e\xcd\x3d\x63\x63\x27\x9d\xed\xe8\x52\x3a\x15\xbe\x50\x44\xf7\xfc\x30\xfa\x91\x2f\x9d\x75\xf0\xbc\x38\x95\xe1\x9e\x32\x2a\x8b\x41\x8a\xce\xfc\xa1\x1c\x8b\x26\xcb\x10\xf3\x21\x8f\xce\xfe\x81\x1c\x7f\xa0\x94\x7a\x05\x8f\x52\x74\xe6\x43\x86\xe0\xc4\xd8\xf7\x4b\x6c\xdf\xec\x49\x6c\x7f\xaa\xfc\x17\x00\x00\xff\xff\x2a\x9d\x7b\x70\xd2\x0c\x00\x00")

func packageTplBytes() ([]byte, error) {
	return bindataRead(
		_packageTpl,
		"package.tpl",
	)
}

func packageTpl() (*asset, error) {
	bytes, err := packageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.tpl", size: 3282, mode: os.FileMode(436), modTime: time.Unix(1533014847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _subpackageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6b\xeb\x38\x14\xdd\xfb\x57\xdc\x31\x6f\x39\xb1\x79\xb4\x8b\x21\x28\x86\xb6\xa1\x4c\x0a\x33\x84\xa6\xbb\x61\x16\x8a\x75\x63\x89\xd8\x92\x91\xe4\xb6\xc6\xe4\xbf\x0f\x92\xec\x44\x71\xc3\xd0\xc5\xdb\xb4\xf1\xd1\x3d\x47\xe7\x7e\xd9\xe4\x37\xa6\x4a\xdb\xb7\x08\xdc\x36\x75\x91\x90\xe9\x1f\x52\x56\x24\x00\x00\xc4\x0a\x5b\x63\x31\x0c\x90\x6d\xa9\xe5\x70\x3a\xc1\x02\x1e\x24\xd3\xaa\x41\x46\x49\x1e\x8e\x43\x68\x83\x96\x42\xc9\xa9\x36\x68\x57\x69\x67\x0f\x8b\x3f\xd2\xf8\x48\xd2\x06\x57\x29\xed\x2c\x57\x3a\x85\x52\x49\x8b\xd2\xae\xd2\x17\xda\xc3\x1b\xed\x6b\xa5\x6f\x44\x33\x34\xa5\x16\xad\x15\x4a\x46\x94\xb3\x01\x10\x06\x28\x54\x9a\xb6\x1c\xd4\x01\x2c\x47\x40\x69\x85\x46\x38\x4a\xf5\x21\xe1\x5d\x18\xb1\xaf\x11\x2a\x05\x9d\x14\xef\xa8\x0d\xa6\x45\x42\xf2\x90\x20\xd9\x2b\xd6\x17\x49\x42\xf8\xcf\x38\x43\x92\xf3\x9f\x0e\x65\xe2\xbd\x48\x08\x05\xae\xf1\xb0\x4a\xf3\xb4\xc8\x49\x4e\x8b\x64\x18\x40\x53\x59\x21\xfc\x68\xa9\x46\x69\x3d\x6b\xb9\x82\x6c\x7b\xac\xb2\xed\x19\x32\x67\xbd\x48\x63\x18\x62\xd6\x14\x90\x16\x33\xfc\x6f\xda\xa0\x37\x12\xae\x43\xc9\xbc\x4c\x1e\x1c\x71\xed\x3d\xdf\x15\xe1\x32\xd8\xd2\xf2\x48\x2b\x24\x39\xbf\x2b\x82\xeb\xcd\x7a\x09\x3e\xa1\x63\x95\x6d\xd6\x5e\x29\x50\xdd\xdf\x1d\xe2\x12\xae\x2c\x8d\xce\x2f\x5e\x62\xc0\x99\x88\xe9\x67\x26\xb7\xb6\x35\xcb\x3c\xaf\x14\x53\x65\xa6\x74\x95\x47\x35\x4c\x8b\xb5\x2a\xbb\x06\xa5\xa5\xae\x77\xb1\x48\x64\xdf\xfb\x86\x8d\x3c\x28\xdd\x8c\x71\x2e\x87\x61\x00\x71\x08\x26\xd6\xd4\x52\x9f\xbb\xe3\xba\x87\xec\x15\x5b\x75\xc9\xee\x0c\xcd\x92\xf4\xf8\x93\x6a\x1a\x61\xcd\x2c\x7a\x44\x6f\x11\x1e\x35\x95\x25\xc7\x39\x63\x82\x6f\x51\xde\x68\x35\x0f\x77\xd0\x4d\xf5\xde\xa2\x79\x53\x96\xd6\x33\xc2\x56\xa3\xb5\xfd\xe5\xf8\x16\xf9\x59\xe9\xe3\xfc\x22\x8f\x5d\x82\xa7\x89\xe5\xf7\xc5\xa6\x69\x95\xb6\x86\xe4\xfc\xbe\x48\x48\x57\x83\xb1\x7d\x8d\xab\xb4\x16\xc6\x2e\xfc\xef\x85\x5b\xfb\x25\x48\x25\xdd\x46\x5c\x66\x5a\x34\xad\x1f\xe6\x5d\xb7\xcf\x46\x15\x57\x7f\xbf\x97\xb5\x28\xae\x47\xd9\x05\x4f\xe3\x1b\x7e\x87\x46\xd7\xe2\x7a\x6e\x3b\xf7\x52\x09\x26\x2f\xf0\xd4\x66\x77\xd3\x2b\x52\xe6\x47\x3e\x8c\x47\xdc\x6d\x77\xb0\x04\xd2\xea\xf0\x16\xba\x8a\x26\xb9\x83\xbf\x28\x87\x11\x8b\xf5\x43\x26\xc8\x1e\xfb\x70\x3e\x55\x08\x19\x3c\xf6\x64\x2c\xd2\xff\x97\x61\x22\xff\x82\x4a\x38\x7b\x51\x1d\xdc\xfd\x4f\x9a\x7e\xd4\xf0\xa7\x30\x56\xe9\x3e\xb4\x2d\x32\xc3\x3e\x7f\x87\x1f\xa5\x0f\x71\xa6\xc6\xb0\xf3\x5e\x8c\xcf\xff\xf8\xcb\xd9\x27\x9c\x4e\xff\xc2\xba\xd3\x7e\xa3\xfc\xc8\x04\x6e\x36\x61\xb3\xf9\xba\x45\xdf\x59\xea\x52\x8e\xd9\x2f\x6a\x3f\xa2\x0f\xf6\x1b\x0a\xcf\x42\x0a\xc3\xbf\x48\x4c\xf0\xb7\x34\x76\x5d\x59\x22\xb2\xaf\x3e\x26\xfc\x1b\x1a\x7f\xa1\x31\xb4\x1a\x77\xfa\x22\x31\xc1\x91\xc2\xbc\x2d\x79\xf8\x3c\x90\x3c\x7c\x15\xff\x0b\x00\x00\xff\xff\x5c\x2e\x02\xd5\x2d\x07\x00\x00")

func subpackageTplBytes() ([]byte, error) {
	return bindataRead(
		_subpackageTpl,
		"subpackage.tpl",
	)
}

func subpackageTpl() (*asset, error) {
	bytes, err := subpackageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "subpackage.tpl", size: 1837, mode: os.FileMode(436), modTime: time.Unix(1531357019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tpl": indexTpl,
	"list.tpl": listTpl,
	"package.tpl": packageTpl,
	"subpackage.tpl": subpackageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tpl": &bintree{indexTpl, map[string]*bintree{}},
	"list.tpl": &bintree{listTpl, map[string]*bintree{}},
	"package.tpl": &bintree{packageTpl, map[string]*bintree{}},
	"subpackage.tpl": &bintree{subpackageTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

