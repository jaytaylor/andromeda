// Code generated by go-bindata.
// sources:
// index.tpl
// package.tpl
// DO NOT EDIT!

package public

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x51\x8b\xd4\x40\x10\x84\xdf\xf3\x2b\xca\xbc\x9b\x70\xf7\x24\x92\x0d\x9c\xa7\x08\xa2\x22\xdc\xf9\x03\x7a\x27\xbd\x99\x61\x93\xee\xd8\xd3\xd9\x75\x39\xee\xbf\xcb\x26\xeb\xb1\x07\x82\x4f\x03\x5d\xd5\x5f\x4d\x0d\xd3\xbc\xe9\x34\xf8\x69\x62\x44\x1f\x87\xb6\x68\xfe\x1e\x4c\x5d\x5b\x00\x40\xe3\xc9\x07\x6e\xef\xa4\x33\x1d\xb9\xa3\xa6\x5e\x07\xab\x38\xb2\x13\x42\x24\xcb\xec\x9b\x72\xf6\xdd\xdb\x77\xe5\xb5\x24\x34\xf2\xa6\xa4\xd9\xa3\x5a\x89\xa0\xe2\x2c\xbe\x29\xbf\xd0\x09\x8f\x74\x1a\xd4\xfe\xe1\xee\x38\x07\x4b\x93\x27\x95\xab\x95\x97\x0b\x20\x65\x10\x7a\xa3\x29\x42\x77\xf0\xc8\x60\xf1\x64\x8c\xbd\xe8\x51\x70\x48\x39\x6d\x07\x46\xaf\x98\x25\x1d\xd8\x32\x97\x6d\xd1\xd4\x6b\xa5\x66\xab\xdd\xe9\x5c\xf0\xe6\xba\x52\xbc\x39\x8f\x6e\xdb\x07\x26\x0b\x71\x61\x7e\x5a\x99\x9f\x75\x20\xe9\xf1\xf3\x42\x6a\xea\x78\xdb\x16\xdf\xe7\x71\xcb\x76\x4e\x9f\x28\xec\xa9\xe7\x8c\x24\x48\xd2\xf1\xef\xf7\x78\x7a\x42\xf5\xf1\x43\xf5\xe3\xa2\x7c\x65\xc1\xf3\x73\xd1\x6c\xad\x2d\xee\x8d\x8e\x03\x7e\xcd\x3c\x33\x06\x96\xde\xe3\x8b\xfd\x51\x17\xf1\x95\xfd\x2e\x78\x3a\x30\x8e\x6a\x7b\xb6\xbc\x58\x97\x0c\x54\xf7\x2a\xbb\xd4\x57\xdf\x28\x3b\x5b\xf5\xe0\xe4\x19\xa5\xf1\xa8\xce\xb9\x7c\x1d\x97\x91\x93\x04\xc6\x64\xda\x1b\x8d\xc8\x4e\xe6\xdc\xfd\x97\x16\x96\xe5\x15\x56\x5f\x1e\xad\x5e\x7f\xc7\x9f\x00\x00\x00\xff\xff\xfe\xc2\xa8\xb3\x35\x02\x00\x00")

func indexTplBytes() ([]byte, error) {
	return bindataRead(
		_indexTpl,
		"index.tpl",
	)
}

func indexTpl() (*asset, error) {
	bytes, err := indexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tpl", size: 565, mode: os.FileMode(436), modTime: time.Unix(1529466680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _packageTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcf\x4f\xe3\x3a\x10\xc7\xef\xf9\x2b\x86\x88\xe3\x6b\x73\xe0\x1d\x9e\x90\x6b\x09\x5a\xa1\x07\x62\x77\x51\x0b\x5c\x56\x7b\x18\xe2\x69\x63\x91\xd8\x91\xe3\x50\xa2\x28\xff\xfb\xca\x76\x52\xbc\xa5\x2b\x71\x69\x3d\xdf\x7c\xe6\x67\xc6\x61\x67\x42\xe7\xb6\xab\x09\x0a\x5b\x95\x3c\x61\xd3\x1f\xa1\xe0\x09\x00\x00\xb3\xd2\x96\xc4\xfb\x1e\xe6\x0f\x68\x0b\x18\x06\x98\xc1\x95\x12\x46\x57\x24\x90\x65\xe1\x71\x40\x2b\xb2\x08\x79\x81\xa6\x21\xbb\x48\x5b\xbb\x9d\xfd\x97\xc6\x8f\x14\x56\xb4\x48\xb1\xb5\x85\x36\x29\xe4\x5a\x59\x52\x76\x91\xde\x61\x07\x8f\xd8\x95\xda\x9c\xa0\x05\x35\xb9\x91\xb5\x95\x5a\x45\x2e\x87\x02\x40\x36\x80\xb0\x33\x58\x17\xa0\xb7\x60\x0b\x02\x52\x56\x1a\x82\x57\xa5\xf7\x0a\xde\x64\x23\x5f\x4a\x82\x9d\x86\x56\xc9\x37\x32\x0d\xa5\x3c\x61\x59\x68\x90\xbd\x68\xd1\xf1\x24\x61\x42\xbe\xf1\xdb\xd5\x25\xb8\x36\x6f\x57\x30\x0c\x2c\x73\x52\xc2\x8a\x0b\xfe\x80\xf9\x2b\xee\x08\xd6\x5a\xdb\x40\x8c\x83\x60\x59\x71\xc1\x83\xef\xd3\xfa\xfe\x12\x18\x42\x61\x68\xbb\x48\x1d\xf3\xb4\xbe\x87\x61\x48\xc1\x0b\x4a\x6f\x75\x59\xea\x7d\xca\x3f\x1e\xb1\x0c\xf9\x94\xe5\x6c\x36\x03\x1f\xe7\x3b\x56\x14\x72\xb8\xd3\xa1\x0e\x98\xcd\x62\xea\xc7\x5e\x91\x09\x98\x3f\x1e\x71\xee\xf4\xbc\xdc\x04\xe0\x79\xb9\x89\xda\x71\xbf\x37\xd2\x34\x16\x1a\x22\x15\x08\x6f\x6f\x88\xd4\x95\x8d\x1b\x37\x3c\x49\xfa\x1e\xe4\x16\xe6\x2b\xb4\x08\xc3\x10\xdc\x9d\x31\x5f\x53\xad\x83\xf7\xc1\x3c\xca\xe2\xf5\xa5\xae\x2a\x69\x9b\x88\x1c\x95\x53\xf0\xb5\x41\x95\x17\x14\xd3\x93\x74\x0a\x7f\xc4\x5d\x8c\x3a\xf3\x14\x76\xa3\xcd\x6b\xcc\x79\xfb\x14\xb8\x26\x14\x6e\xf8\xac\x36\x61\xdd\x23\xd5\xf3\x4e\x8f\xa7\xd3\xf7\x40\x4a\xb8\xb9\x4c\x73\xba\xad\x6a\x6d\x2c\x89\xeb\xce\x4f\xab\xf8\x97\x4f\x0a\x5c\x77\xce\x4c\x58\x5b\x7a\x47\x83\x6a\x47\x70\x2e\xab\x1a\x2e\x17\xc7\x8e\xfe\x0a\x94\x92\x1f\xf6\x29\xeb\xfb\xc0\x0e\x83\xdf\xa0\xf1\x1c\x36\xa8\x94\x71\x29\x2c\x6b\xcb\xcf\xf5\xb9\xdc\x4b\x83\xfb\x12\xfe\x97\x8d\xd5\xa6\x63\x99\xab\x26\x2a\x44\xbc\xff\x03\xe7\xb9\x47\x5c\x41\x23\x76\x78\xe9\xa3\xfd\xd3\x27\x17\xef\x30\x0c\xbf\x60\xd5\x1a\x74\xd7\xd2\x0f\x37\xf8\xce\x27\xed\x68\xc0\xa7\xdc\x37\x16\x5d\xcb\xb1\xf7\x9d\x7e\x19\xd5\x3f\x56\xf1\x6f\x11\x6e\xa4\x92\x4d\xf1\x29\xc4\x24\x7f\x29\xc6\xa6\xcd\x73\x22\xf1\xb9\x8e\x49\xff\x42\x8c\x6f\xd4\x34\xb8\x1b\x17\xf7\x23\xc4\x24\x1f\x5d\xaa\xf8\xb5\x64\xe1\xfb\xc3\xb2\xf0\xd9\xfd\x1d\x00\x00\xff\xff\xd8\x48\x8c\x47\x8e\x05\x00\x00")

func packageTplBytes() ([]byte, error) {
	return bindataRead(
		_packageTpl,
		"package.tpl",
	)
}

func packageTpl() (*asset, error) {
	bytes, err := packageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "package.tpl", size: 1422, mode: os.FileMode(436), modTime: time.Unix(1529526774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tpl": indexTpl,
	"package.tpl": packageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tpl": &bintree{indexTpl, map[string]*bintree{}},
	"package.tpl": &bintree{packageTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

