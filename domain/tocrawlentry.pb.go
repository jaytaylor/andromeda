// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tocrawlentry.proto

package domain // import "jaytaylor.com/andromeda/domain"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ToCrawlEntry struct {
	ID                   uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PackagePath          string     `protobuf:"bytes,2,opt,name=package_path,json=packagePath,proto3" json:"package_path,omitempty"`
	Reason               string     `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Errors               uint32     `protobuf:"varint,4,opt,name=errors,proto3" json:"errors,omitempty"`
	LastMessage          string     `protobuf:"bytes,5,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	SubmittedAt          *time.Time `protobuf:"bytes,6,opt,name=submitted_at,json=submittedAt,stdtime" json:"submitted_at,omitempty"`
	Force                bool       `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ToCrawlEntry) Reset()         { *m = ToCrawlEntry{} }
func (m *ToCrawlEntry) String() string { return proto.CompactTextString(m) }
func (*ToCrawlEntry) ProtoMessage()    {}
func (*ToCrawlEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_tocrawlentry_08d40b1f9ab96c0f, []int{0}
}
func (m *ToCrawlEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToCrawlEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToCrawlEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ToCrawlEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToCrawlEntry.Merge(dst, src)
}
func (m *ToCrawlEntry) XXX_Size() int {
	return m.Size()
}
func (m *ToCrawlEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ToCrawlEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ToCrawlEntry proto.InternalMessageInfo

func (m *ToCrawlEntry) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ToCrawlEntry) GetPackagePath() string {
	if m != nil {
		return m.PackagePath
	}
	return ""
}

func (m *ToCrawlEntry) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ToCrawlEntry) GetErrors() uint32 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *ToCrawlEntry) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *ToCrawlEntry) GetSubmittedAt() *time.Time {
	if m != nil {
		return m.SubmittedAt
	}
	return nil
}

func (m *ToCrawlEntry) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func init() {
	proto.RegisterType((*ToCrawlEntry)(nil), "domain.ToCrawlEntry")
}
func (m *ToCrawlEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToCrawlEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTocrawlentry(dAtA, i, uint64(m.ID))
	}
	if len(m.PackagePath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTocrawlentry(dAtA, i, uint64(len(m.PackagePath)))
		i += copy(dAtA[i:], m.PackagePath)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTocrawlentry(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.Errors != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTocrawlentry(dAtA, i, uint64(m.Errors))
	}
	if len(m.LastMessage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTocrawlentry(dAtA, i, uint64(len(m.LastMessage)))
		i += copy(dAtA[i:], m.LastMessage)
	}
	if m.SubmittedAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTocrawlentry(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.SubmittedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SubmittedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Force {
		dAtA[i] = 0x38
		i++
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTocrawlentry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ToCrawlEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTocrawlentry(uint64(m.ID))
	}
	l = len(m.PackagePath)
	if l > 0 {
		n += 1 + l + sovTocrawlentry(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTocrawlentry(uint64(l))
	}
	if m.Errors != 0 {
		n += 1 + sovTocrawlentry(uint64(m.Errors))
	}
	l = len(m.LastMessage)
	if l > 0 {
		n += 1 + l + sovTocrawlentry(uint64(l))
	}
	if m.SubmittedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SubmittedAt)
		n += 1 + l + sovTocrawlentry(uint64(l))
	}
	if m.Force {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTocrawlentry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTocrawlentry(x uint64) (n int) {
	return sovTocrawlentry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ToCrawlEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTocrawlentry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToCrawlEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToCrawlEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTocrawlentry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTocrawlentry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			m.Errors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTocrawlentry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTocrawlentry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmittedAt == nil {
				m.SubmittedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SubmittedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTocrawlentry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTocrawlentry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTocrawlentry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTocrawlentry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTocrawlentry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTocrawlentry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTocrawlentry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTocrawlentry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTocrawlentry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTocrawlentry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tocrawlentry.proto", fileDescriptor_tocrawlentry_08d40b1f9ab96c0f) }

var fileDescriptor_tocrawlentry_08d40b1f9ab96c0f = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xe5, 0xd0, 0x0d, 0xbb, 0x6e, 0x57, 0x48, 0x16, 0x42, 0x69, 0x0f, 0x6d, 0x40, 0x42,
	0x0a, 0x87, 0x26, 0x12, 0x7b, 0x5b, 0x4e, 0x74, 0xe1, 0xc0, 0x01, 0x09, 0x45, 0x3d, 0x71, 0xa9,
	0x26, 0x89, 0xeb, 0x1a, 0x62, 0x4f, 0x64, 0xbb, 0x82, 0xbe, 0x05, 0xe2, 0x6d, 0xda, 0x27, 0xe0,
	0xc8, 0x13, 0x00, 0xca, 0x93, 0xa0, 0xc4, 0x29, 0xec, 0xc9, 0xfe, 0x7d, 0x33, 0xdf, 0xfc, 0xd1,
	0x50, 0xe6, 0xb0, 0x34, 0xf0, 0xa5, 0xe6, 0xda, 0x99, 0x43, 0xda, 0x18, 0x74, 0xc8, 0xc2, 0x0a,
	0x15, 0x48, 0x3d, 0x5b, 0x0a, 0xe9, 0x76, 0xfb, 0x22, 0x2d, 0x51, 0x65, 0x02, 0x05, 0x66, 0x7d,
	0xb8, 0xd8, 0x6f, 0x7b, 0xea, 0xa1, 0xff, 0x79, 0xdb, 0xec, 0xf6, 0x5e, 0xba, 0xd4, 0x5b, 0x2c,
	0x6a, 0xfc, 0x8a, 0x0d, 0xd7, 0xde, 0x56, 0x2e, 0x05, 0xd7, 0x4b, 0x81, 0x46, 0x65, 0xd8, 0x38,
	0x89, 0xda, 0x66, 0x1d, 0x0c, 0xde, 0x85, 0x40, 0x14, 0x35, 0xff, 0xdf, 0xc1, 0x49, 0xc5, 0xad,
	0x03, 0xd5, 0xf8, 0x84, 0x67, 0xdf, 0x03, 0x3a, 0x59, 0xe3, 0x5d, 0x37, 0xea, 0xdb, 0x6e, 0x54,
	0xf6, 0x82, 0x06, 0xb2, 0x8a, 0x48, 0x4c, 0x92, 0xd1, 0x6a, 0x7a, 0x3a, 0x4e, 0x1f, 0xd1, 0x6b,
	0x76, 0x55, 0x48, 0x61, 0xb9, 0x91, 0x50, 0x27, 0xa4, 0xfd, 0xb5, 0x08, 0xde, 0xbd, 0xc9, 0x03,
	0x59, 0xb1, 0xa7, 0x74, 0xd2, 0x40, 0xf9, 0x19, 0x04, 0xdf, 0x34, 0xe0, 0x76, 0x51, 0x10, 0x93,
	0xe4, 0x2a, 0x1f, 0x0f, 0xda, 0x07, 0x70, 0x3b, 0xf6, 0x84, 0x86, 0x86, 0x83, 0x45, 0x1d, 0x3d,
	0xe8, 0x83, 0x03, 0x75, 0x3a, 0x37, 0x06, 0x8d, 0x8d, 0x46, 0x31, 0x49, 0xae, 0xf3, 0x81, 0xba,
	0x92, 0x35, 0x58, 0xb7, 0x51, 0xdc, 0x5a, 0x10, 0x3c, 0xba, 0xf0, 0x25, 0x3b, 0xed, 0xbd, 0x97,
	0xd8, 0x1d, 0x9d, 0xd8, 0x7d, 0xa1, 0xa4, 0x73, 0xbc, 0xda, 0x80, 0x8b, 0xc2, 0x98, 0x24, 0xe3,
	0x97, 0xb3, 0xd4, 0x6f, 0x9a, 0x9e, 0x37, 0x4d, 0xd7, 0xe7, 0x4d, 0x57, 0xa3, 0x6f, 0xbf, 0x17,
	0x24, 0x1f, 0xff, 0x73, 0xbd, 0x76, 0xec, 0x31, 0xbd, 0xd8, 0xa2, 0x29, 0x79, 0xf4, 0x30, 0x26,
	0xc9, 0x65, 0xee, 0xe1, 0x36, 0x3c, 0x1d, 0xa7, 0xc1, 0x25, 0x59, 0xdd, 0xfc, 0x68, 0xe7, 0xe4,
	0x67, 0x3b, 0x27, 0x7f, 0xda, 0x39, 0xf9, 0xf8, 0xfc, 0x13, 0x1c, 0x1c, 0x1c, 0x6a, 0x34, 0xfd,
	0x09, 0x40, 0x57, 0x06, 0x15, 0xaf, 0x20, 0xf3, 0xe7, 0x7c, 0xe5, 0x9f, 0x22, 0xec, 0x3b, 0xdf,
	0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x41, 0x06, 0xd0, 0xfa, 0x01, 0x00, 0x00,
}
