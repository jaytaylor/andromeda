// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: remote_crawler.proto

package domain // import "jaytaylor.com/andromeda/domain"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/mwitkow/go-proto-validators"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CrawlResult struct {
	Package              *Package                      `protobuf:"bytes,1,opt,name=Package" json:"Package,omitempty"`
	ImportedResources    map[string]*PackageReferences `protobuf:"bytes,2,rep,name=imported_resources,json=importedResources" json:"imported_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	ErrMsg               string                        `protobuf:"bytes,3,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CrawlResult) Reset()         { *m = CrawlResult{} }
func (m *CrawlResult) String() string { return proto.CompactTextString(m) }
func (*CrawlResult) ProtoMessage()    {}
func (*CrawlResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_crawler_5cf28a4f28e97ad4, []int{0}
}
func (m *CrawlResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrawlResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrawlResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CrawlResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlResult.Merge(dst, src)
}
func (m *CrawlResult) XXX_Size() int {
	return m.Size()
}
func (m *CrawlResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlResult.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlResult proto.InternalMessageInfo

func (m *CrawlResult) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *CrawlResult) GetImportedResources() map[string]*PackageReferences {
	if m != nil {
		return m.ImportedResources
	}
	return nil
}

func (m *CrawlResult) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (*CrawlResult) XXX_MessageName() string {
	return "domain.CrawlResult"
}

type EnqueueRequest struct {
	Entries              []*ToCrawlEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Priority             int32           `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	OnlyIfNotExists      bool            `protobuf:"varint,3,opt,name=only_if_not_exists,json=onlyIfNotExists,proto3" json:"only_if_not_exists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EnqueueRequest) Reset()         { *m = EnqueueRequest{} }
func (m *EnqueueRequest) String() string { return proto.CompactTextString(m) }
func (*EnqueueRequest) ProtoMessage()    {}
func (*EnqueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_crawler_5cf28a4f28e97ad4, []int{1}
}
func (m *EnqueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnqueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnqueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EnqueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueRequest.Merge(dst, src)
}
func (m *EnqueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnqueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueRequest proto.InternalMessageInfo

func (m *EnqueueRequest) GetEntries() []*ToCrawlEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *EnqueueRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *EnqueueRequest) GetOnlyIfNotExists() bool {
	if m != nil {
		return m.OnlyIfNotExists
	}
	return false
}

func (*EnqueueRequest) XXX_MessageName() string {
	return "domain.EnqueueRequest"
}

type EnqueueResponse struct {
	N                    int32    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnqueueResponse) Reset()         { *m = EnqueueResponse{} }
func (m *EnqueueResponse) String() string { return proto.CompactTextString(m) }
func (*EnqueueResponse) ProtoMessage()    {}
func (*EnqueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_crawler_5cf28a4f28e97ad4, []int{2}
}
func (m *EnqueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnqueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnqueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EnqueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueResponse.Merge(dst, src)
}
func (m *EnqueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *EnqueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueResponse proto.InternalMessageInfo

func (m *EnqueueResponse) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

func (*EnqueueResponse) XXX_MessageName() string {
	return "domain.EnqueueResponse"
}

type OperationResult struct {
	ErrMsg               string   `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationResult) Reset()         { *m = OperationResult{} }
func (m *OperationResult) String() string { return proto.CompactTextString(m) }
func (*OperationResult) ProtoMessage()    {}
func (*OperationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_crawler_5cf28a4f28e97ad4, []int{3}
}
func (m *OperationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OperationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResult.Merge(dst, src)
}
func (m *OperationResult) XXX_Size() int {
	return m.Size()
}
func (m *OperationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResult.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResult proto.InternalMessageInfo

func (m *OperationResult) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (*OperationResult) XXX_MessageName() string {
	return "domain.OperationResult"
}
func init() {
	proto.RegisterType((*CrawlResult)(nil), "domain.CrawlResult")
	proto.RegisterMapType((map[string]*PackageReferences)(nil), "domain.CrawlResult.ImportedResourcesEntry")
	proto.RegisterType((*EnqueueRequest)(nil), "domain.EnqueueRequest")
	proto.RegisterType((*EnqueueResponse)(nil), "domain.EnqueueResponse")
	proto.RegisterType((*OperationResult)(nil), "domain.OperationResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteCrawlerServiceClient is the client API for RemoteCrawlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteCrawlerServiceClient interface {
	Attach(ctx context.Context, opts ...grpc.CallOption) (RemoteCrawlerService_AttachClient, error)
	Receive(ctx context.Context, in *CrawlResult, opts ...grpc.CallOption) (*OperationResult, error)
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
}

type remoteCrawlerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCrawlerServiceClient(cc *grpc.ClientConn) RemoteCrawlerServiceClient {
	return &remoteCrawlerServiceClient{cc}
}

func (c *remoteCrawlerServiceClient) Attach(ctx context.Context, opts ...grpc.CallOption) (RemoteCrawlerService_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteCrawlerService_serviceDesc.Streams[0], "/domain.RemoteCrawlerService/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCrawlerServiceAttachClient{stream}
	return x, nil
}

type RemoteCrawlerService_AttachClient interface {
	Send(*CrawlResult) error
	Recv() (*ToCrawlEntry, error)
	grpc.ClientStream
}

type remoteCrawlerServiceAttachClient struct {
	grpc.ClientStream
}

func (x *remoteCrawlerServiceAttachClient) Send(m *CrawlResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCrawlerServiceAttachClient) Recv() (*ToCrawlEntry, error) {
	m := new(ToCrawlEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteCrawlerServiceClient) Receive(ctx context.Context, in *CrawlResult, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/domain.RemoteCrawlerService/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteCrawlerServiceClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, "/domain.RemoteCrawlerService/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteCrawlerServiceServer is the server API for RemoteCrawlerService service.
type RemoteCrawlerServiceServer interface {
	Attach(RemoteCrawlerService_AttachServer) error
	Receive(context.Context, *CrawlResult) (*OperationResult, error)
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
}

func RegisterRemoteCrawlerServiceServer(s *grpc.Server, srv RemoteCrawlerServiceServer) {
	s.RegisterService(&_RemoteCrawlerService_serviceDesc, srv)
}

func _RemoteCrawlerService_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteCrawlerServiceServer).Attach(&remoteCrawlerServiceAttachServer{stream})
}

type RemoteCrawlerService_AttachServer interface {
	Send(*ToCrawlEntry) error
	Recv() (*CrawlResult, error)
	grpc.ServerStream
}

type remoteCrawlerServiceAttachServer struct {
	grpc.ServerStream
}

func (x *remoteCrawlerServiceAttachServer) Send(m *ToCrawlEntry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCrawlerServiceAttachServer) Recv() (*CrawlResult, error) {
	m := new(CrawlResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoteCrawlerService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCrawlerServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.RemoteCrawlerService/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCrawlerServiceServer).Receive(ctx, req.(*CrawlResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteCrawlerService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteCrawlerServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.RemoteCrawlerService/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteCrawlerServiceServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteCrawlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.RemoteCrawlerService",
	HandlerType: (*RemoteCrawlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _RemoteCrawlerService_Receive_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _RemoteCrawlerService_Enqueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _RemoteCrawlerService_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote_crawler.proto",
}

func (m *CrawlResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrawlResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Package != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(m.Package.Size()))
		n1, err := m.Package.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ImportedResources) > 0 {
		for k, _ := range m.ImportedResources {
			dAtA[i] = 0x12
			i++
			v := m.ImportedResources[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRemoteCrawler(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRemoteCrawler(uint64(len(k))) + msgSize
			i = encodeVarintRemoteCrawler(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRemoteCrawler(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRemoteCrawler(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EnqueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnqueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRemoteCrawler(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Priority != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(m.Priority))
	}
	if m.OnlyIfNotExists {
		dAtA[i] = 0x18
		i++
		if m.OnlyIfNotExists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EnqueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnqueueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(m.N))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OperationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRemoteCrawler(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CrawlResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Package != nil {
		l = m.Package.Size()
		n += 1 + l + sovRemoteCrawler(uint64(l))
	}
	if len(m.ImportedResources) > 0 {
		for k, v := range m.ImportedResources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRemoteCrawler(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRemoteCrawler(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRemoteCrawler(uint64(mapEntrySize))
		}
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovRemoteCrawler(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnqueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRemoteCrawler(uint64(l))
		}
	}
	if m.Priority != 0 {
		n += 1 + sovRemoteCrawler(uint64(m.Priority))
	}
	if m.OnlyIfNotExists {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnqueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.N != 0 {
		n += 1 + sovRemoteCrawler(uint64(m.N))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OperationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovRemoteCrawler(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRemoteCrawler(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRemoteCrawler(x uint64) (n int) {
	return sovRemoteCrawler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrawlResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrawlResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrawlResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Package == nil {
				m.Package = &Package{}
			}
			if err := m.Package.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImportedResources == nil {
				m.ImportedResources = make(map[string]*PackageReferences)
			}
			var mapkey string
			var mapvalue *PackageReferences
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRemoteCrawler
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRemoteCrawler
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRemoteCrawler
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PackageReferences{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ImportedResources[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnqueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnqueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnqueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &ToCrawlEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyIfNotExists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyIfNotExists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnqueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnqueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnqueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteCrawler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRemoteCrawler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRemoteCrawler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRemoteCrawler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRemoteCrawler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteCrawler   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("remote_crawler.proto", fileDescriptor_remote_crawler_5cf28a4f28e97ad4)
}

var fileDescriptor_remote_crawler_5cf28a4f28e97ad4 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xdb, 0x38,
	0x10, 0x5d, 0xda, 0xb0, 0x9d, 0x30, 0xbb, 0xf1, 0x2e, 0x63, 0x64, 0x1d, 0xef, 0xc2, 0x11, 0x74,
	0x72, 0xbc, 0x6b, 0x2b, 0x71, 0x81, 0xa2, 0xf0, 0x2d, 0x4d, 0x8d, 0x20, 0x40, 0xbf, 0xa0, 0x14,
	0x45, 0xdb, 0x8b, 0x41, 0xcb, 0x63, 0x85, 0xb5, 0x44, 0x2a, 0x24, 0x65, 0xc7, 0xd7, 0xde, 0x0a,
	0xf4, 0xd4, 0x1c, 0xda, 0x9f, 0xd3, 0x63, 0x8e, 0x05, 0xfa, 0x07, 0x8a, 0xa4, 0x3f, 0xa4, 0x30,
	0x25, 0x25, 0xa9, 0xeb, 0x9e, 0xc4, 0x99, 0x79, 0xf3, 0x34, 0xef, 0x91, 0x83, 0x2b, 0x12, 0x42,
	0xa1, 0xa1, 0xef, 0x49, 0x3a, 0x0d, 0x40, 0xb6, 0x23, 0x29, 0xb4, 0x20, 0xc5, 0xa1, 0x08, 0x29,
	0xe3, 0xb5, 0x7f, 0x7c, 0x21, 0xfc, 0x00, 0x1c, 0x93, 0x1d, 0xc4, 0x23, 0x07, 0xc2, 0x48, 0xcf,
	0x12, 0x50, 0x6d, 0x7b, 0xb1, 0xa8, 0x59, 0x08, 0x4a, 0xd3, 0x30, 0x4a, 0x01, 0xd6, 0x22, 0x60,
	0xc4, 0x20, 0x18, 0xf6, 0x43, 0xaa, 0xc6, 0x29, 0xe2, 0xdf, 0x14, 0x41, 0x23, 0xe6, 0x50, 0xce,
	0x85, 0xa6, 0x9a, 0x09, 0xae, 0xd2, 0xea, 0xff, 0xe6, 0xe3, 0xb5, 0x7c, 0xe0, 0x2d, 0x35, 0xa5,
	0xbe, 0x0f, 0xd2, 0x11, 0x91, 0x41, 0x2c, 0x41, 0xb7, 0x7c, 0xa6, 0x4f, 0xe2, 0x41, 0xdb, 0x13,
	0xa1, 0xe3, 0x0b, 0x5f, 0xdc, 0xfc, 0x76, 0x1e, 0x99, 0xc0, 0x9c, 0x52, 0xf8, 0xdd, 0x5b, 0xf0,
	0x70, 0xca, 0xf4, 0x58, 0x4c, 0x1d, 0x5f, 0xb4, 0x4c, 0xb1, 0x35, 0xa1, 0x01, 0x1b, 0x52, 0x2d,
	0xa4, 0x72, 0xae, 0x8f, 0x69, 0xdf, 0x1f, 0x11, 0xf5, 0xc6, 0xd4, 0x87, 0x34, 0x24, 0x5a, 0x24,
	0xd6, 0x71, 0x2d, 0x53, 0x63, 0xec, 0x77, 0x39, 0xbc, 0x76, 0x30, 0x4f, 0xba, 0xa0, 0xe2, 0x40,
	0x93, 0x1d, 0x5c, 0x7a, 0x9a, 0x34, 0x55, 0x91, 0x85, 0x1a, 0x6b, 0x9d, 0x72, 0x3b, 0xf1, 0xb7,
	0x9d, 0xa6, 0xdd, 0xac, 0x4e, 0x5e, 0x62, 0xc2, 0xc2, 0x48, 0x48, 0x0d, 0xc3, 0xbe, 0x04, 0x25,
	0x62, 0xe9, 0x81, 0xaa, 0xe6, 0xac, 0x7c, 0x63, 0xad, 0xd3, 0xcc, 0xba, 0x6e, 0x71, 0xb7, 0x8f,
	0x52, 0xb4, 0x9b, 0x81, 0x7b, 0xf3, 0x41, 0xdc, 0xbf, 0xd8, 0x62, 0x9e, 0x6c, 0xe2, 0x62, 0x4f,
	0xca, 0x47, 0xca, 0xaf, 0xe6, 0x2d, 0xd4, 0x58, 0x75, 0xd3, 0xa8, 0xd6, 0xc7, 0x9b, 0xcb, 0x49,
	0xc8, 0x9f, 0x38, 0x3f, 0x86, 0x99, 0x99, 0x79, 0xd5, 0x9d, 0x1f, 0x89, 0x83, 0x0b, 0x13, 0x1a,
	0xc4, 0x50, 0xcd, 0x19, 0x1d, 0x5b, 0x8b, 0x3a, 0x60, 0x04, 0x12, 0xb8, 0x07, 0xca, 0x4d, 0x70,
	0xdd, 0xdc, 0x3d, 0x64, 0xbf, 0x45, 0x78, 0xbd, 0xc7, 0x4f, 0x63, 0x88, 0xc1, 0x85, 0xd3, 0x18,
	0x94, 0x26, 0x6d, 0x5c, 0x9a, 0x1b, 0xc6, 0x40, 0x55, 0x91, 0xd1, 0x56, 0xc9, 0x98, 0x9e, 0x09,
	0xa3, 0x2e, 0x51, 0x91, 0x81, 0x48, 0x0d, 0xaf, 0x44, 0x92, 0x09, 0xc9, 0xf4, 0xcc, 0xfc, 0xba,
	0xe0, 0x5e, 0xc7, 0xe4, 0x3f, 0x4c, 0x04, 0x0f, 0x66, 0x7d, 0x36, 0xea, 0x73, 0xa1, 0xfb, 0x70,
	0xc6, 0x94, 0x56, 0x46, 0xe3, 0x8a, 0x5b, 0x9e, 0x57, 0x8e, 0x46, 0x8f, 0x85, 0xee, 0x99, 0xb4,
	0xbd, 0x8d, 0xcb, 0xd7, 0xa3, 0xa8, 0x48, 0x70, 0x05, 0xe4, 0x77, 0x8c, 0xb8, 0xd1, 0x58, 0x70,
	0x11, 0xb7, 0x77, 0x70, 0xf9, 0x49, 0x04, 0xd2, 0xbc, 0xac, 0xf4, 0xfa, 0x6e, 0x8c, 0x43, 0xb7,
	0x8d, 0xeb, 0x7c, 0xc8, 0xe1, 0x8a, 0x6b, 0xb6, 0xe7, 0x20, 0x59, 0x9e, 0x63, 0x90, 0x13, 0xe6,
	0x01, 0x71, 0x71, 0x71, 0x5f, 0x6b, 0xea, 0x9d, 0x90, 0x8d, 0x25, 0x57, 0x56, 0x5b, 0xaa, 0xd5,
	0xde, 0x7a, 0xf3, 0xe5, 0xdb, 0x79, 0x6e, 0xc3, 0x5e, 0x37, 0xcb, 0x30, 0xd9, 0x73, 0xa8, 0xa1,
	0xe8, 0xa2, 0x66, 0x03, 0xed, 0x22, 0x72, 0x8c, 0x4b, 0x2e, 0x78, 0xc0, 0x26, 0xb0, 0x9c, 0xf4,
	0xef, 0x2c, 0xb9, 0x30, 0xbd, 0x5d, 0x33, 0xbc, 0x15, 0xbb, 0x9c, 0xf1, 0xca, 0x84, 0xa6, 0x8b,
	0x9a, 0xe4, 0x39, 0x2e, 0xa5, 0x6e, 0x90, 0xcd, 0xac, 0xff, 0xc7, 0x9b, 0xba, 0xe1, 0x5d, 0xb0,
	0xed, 0x67, 0x5e, 0x48, 0x00, 0x5d, 0xd4, 0xbc, 0x7f, 0x8e, 0xde, 0xef, 0xbf, 0x20, 0x85, 0x4e,
	0x7e, 0xaf, 0xbd, 0xdb, 0x44, 0x39, 0xf9, 0x10, 0xef, 0xec, 0xf3, 0xa1, 0x14, 0x21, 0x0c, 0xa9,
	0x75, 0x48, 0x03, 0x7a, 0x36, 0xb3, 0x0e, 0x45, 0x40, 0xb9, 0x6f, 0xa5, 0x2f, 0x47, 0x59, 0x0f,
	0xa8, 0xa6, 0x03, 0xaa, 0x80, 0x6c, 0x9f, 0x68, 0x1d, 0xa9, 0xae, 0xe3, 0xbc, 0xa6, 0x33, 0x4d,
	0x67, 0x81, 0x90, 0x66, 0x47, 0x69, 0x46, 0x70, 0x71, 0x59, 0x47, 0x9f, 0x2f, 0xeb, 0xe8, 0xeb,
	0x65, 0x1d, 0x7d, 0xbc, 0xaa, 0xff, 0xf6, 0xe9, 0xaa, 0x8e, 0x2e, 0xae, 0xea, 0xe8, 0x55, 0xfd,
	0x17, 0x0d, 0x4e, 0xa2, 0x60, 0x50, 0x34, 0xdb, 0x79, 0xe7, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x07, 0x91, 0x3c, 0x15, 0xf3, 0x04, 0x00, 0x00,
}
