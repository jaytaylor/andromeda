// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: remote_crawler.proto

package domain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mwitkow/go-proto-validators"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteCrawlerService service

type RemoteCrawlerServiceClient interface {
	// rpc Next() returns (ToCrawlEntry) {}
	Attach(ctx context.Context, opts ...grpc.CallOption) (RemoteCrawlerService_AttachClient, error)
}

type remoteCrawlerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCrawlerServiceClient(cc *grpc.ClientConn) RemoteCrawlerServiceClient {
	return &remoteCrawlerServiceClient{cc}
}

func (c *remoteCrawlerServiceClient) Attach(ctx context.Context, opts ...grpc.CallOption) (RemoteCrawlerService_AttachClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteCrawlerService_serviceDesc.Streams[0], c.cc, "/domain.RemoteCrawlerService/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCrawlerServiceAttachClient{stream}
	return x, nil
}

type RemoteCrawlerService_AttachClient interface {
	Send(*Package) error
	Recv() (*ToCrawlEntry, error)
	grpc.ClientStream
}

type remoteCrawlerServiceAttachClient struct {
	grpc.ClientStream
}

func (x *remoteCrawlerServiceAttachClient) Send(m *Package) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCrawlerServiceAttachClient) Recv() (*ToCrawlEntry, error) {
	m := new(ToCrawlEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteCrawlerService service

type RemoteCrawlerServiceServer interface {
	// rpc Next() returns (ToCrawlEntry) {}
	Attach(RemoteCrawlerService_AttachServer) error
}

func RegisterRemoteCrawlerServiceServer(s *grpc.Server, srv RemoteCrawlerServiceServer) {
	s.RegisterService(&_RemoteCrawlerService_serviceDesc, srv)
}

func _RemoteCrawlerService_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteCrawlerServiceServer).Attach(&remoteCrawlerServiceAttachServer{stream})
}

type RemoteCrawlerService_AttachServer interface {
	Send(*ToCrawlEntry) error
	Recv() (*Package, error)
	grpc.ServerStream
}

type remoteCrawlerServiceAttachServer struct {
	grpc.ServerStream
}

func (x *remoteCrawlerServiceAttachServer) Send(m *ToCrawlEntry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCrawlerServiceAttachServer) Recv() (*Package, error) {
	m := new(Package)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RemoteCrawlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.RemoteCrawlerService",
	HandlerType: (*RemoteCrawlerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _RemoteCrawlerService_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote_crawler.proto",
}

func init() { proto.RegisterFile("remote_crawler.proto", fileDescriptorRemoteCrawler) }

var fileDescriptorRemoteCrawler = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0x87, 0xd9, 0x43, 0xa4, 0xb0, 0x04, 0x48, 0x26, 0x0d, 0x01, 0xf9, 0xac, 0xab, 0xe0, 0x84,
	0xbd, 0x77, 0x87, 0x44, 0x71, 0x5d, 0xf8, 0xa3, 0x6b, 0x10, 0x42, 0x40, 0x81, 0x68, 0x4e, 0x63,
	0x7b, 0xb3, 0x59, 0xe2, 0xdd, 0xb1, 0x76, 0x27, 0x31, 0x6e, 0x79, 0x04, 0xd2, 0xf0, 0x38, 0x94,
	0x29, 0x91, 0x78, 0x01, 0x94, 0xf0, 0x20, 0x28, 0xeb, 0x0d, 0xa0, 0x88, 0xab, 0xbc, 0x33, 0xf3,
	0xfd, 0x66, 0xe4, 0x2f, 0x1a, 0x5a, 0xa1, 0x91, 0xc4, 0x65, 0x69, 0xa1, 0xad, 0x85, 0xcd, 0x1b,
	0x8b, 0x84, 0xf1, 0xa0, 0x42, 0x0d, 0xca, 0x8c, 0xee, 0x49, 0x44, 0x59, 0x0b, 0xee, 0xbb, 0xc5,
	0x7c, 0xc2, 0x85, 0x6e, 0xa8, 0xeb, 0xa1, 0xd1, 0xe1, 0xfe, 0x90, 0x94, 0x16, 0x8e, 0x40, 0x37,
	0x01, 0x48, 0xf7, 0x81, 0x89, 0x12, 0x75, 0x75, 0xa9, 0xc1, 0xcd, 0x02, 0x71, 0x3f, 0x10, 0xd0,
	0x28, 0x0e, 0xc6, 0x20, 0x01, 0x29, 0x34, 0x2e, 0x4c, 0x1f, 0xf9, 0x4f, 0x99, 0x49, 0x61, 0x32,
	0xd7, 0x82, 0x94, 0xc2, 0x72, 0x6c, 0x3c, 0xf1, 0x1f, 0x3a, 0x93, 0x8a, 0xa6, 0xf3, 0x22, 0x2f,
	0x51, 0x73, 0x89, 0x12, 0xff, 0x9e, 0xdd, 0x56, 0xbe, 0xf0, 0xaf, 0x80, 0x3f, 0xf9, 0x07, 0xd7,
	0xad, 0xa2, 0x19, 0xb6, 0x5c, 0x62, 0xe6, 0x87, 0xd9, 0x02, 0x6a, 0x55, 0x01, 0xa1, 0x75, 0xfc,
	0xcf, 0x33, 0xe4, 0x6e, 0x36, 0x50, 0xce, 0x40, 0x8a, 0x50, 0xc6, 0x84, 0xbd, 0x3a, 0x43, 0x36,
	0x88, 0x39, 0x9b, 0x44, 0xc3, 0x37, 0xde, 0xea, 0xb3, 0x5e, 0xea, 0x5b, 0x61, 0x17, 0xaa, 0x14,
	0xf1, 0xab, 0x68, 0x30, 0x26, 0x82, 0x72, 0x1a, 0xdf, 0xce, 0x7b, 0xc1, 0xf9, 0xeb, 0x7e, 0xd9,
	0x68, 0xb8, 0x6b, 0xbc, 0x43, 0x1f, 0x7a, 0xb1, 0x5d, 0x77, 0x74, 0xf7, 0xf3, 0x8f, 0x5f, 0xcb,
	0x83, 0x3b, 0x47, 0xb7, 0xbc, 0xa0, 0xc5, 0x29, 0x07, 0x1f, 0x3f, 0x67, 0xc7, 0x0f, 0xd8, 0x09,
	0x7b, 0xba, 0x64, 0x5f, 0xc6, 0xef, 0xe3, 0x1b, 0x67, 0xd7, 0x4f, 0xf3, 0x93, 0x63, 0x76, 0x60,
	0x5f, 0x46, 0x0f, 0xc7, 0xa6, 0xb2, 0xa8, 0x45, 0x05, 0xe9, 0x05, 0xd4, 0xf0, 0xa9, 0x4b, 0x2f,
	0xb0, 0x06, 0x23, 0xd3, 0x70, 0xc7, 0xa5, 0xcf, 0x81, 0xa0, 0x00, 0x27, 0xe2, 0xc3, 0x29, 0x51,
	0xe3, 0xce, 0x39, 0xff, 0x08, 0x1d, 0x41, 0x57, 0xa3, 0xf5, 0x2a, 0x60, 0xb7, 0x60, 0xb5, 0x4e,
	0xd8, 0xf7, 0x75, 0xc2, 0x7e, 0xae, 0x13, 0xf6, 0x75, 0x93, 0x5c, 0xfb, 0xb6, 0x49, 0xd8, 0x6a,
	0x93, 0xb0, 0x0f, 0xc9, 0x15, 0x01, 0xde, 0xff, 0x41, 0x31, 0xf0, 0x12, 0x1e, 0xff, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x63, 0x8b, 0xe7, 0x93, 0x5a, 0x02, 0x00, 0x00,
}
