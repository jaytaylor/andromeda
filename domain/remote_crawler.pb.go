// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: remote_crawler.proto

package domain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mwitkow/go-proto-validators"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CrawlResult struct {
	Package           *Package                      `protobuf:"bytes,1,opt,name=Package" json:"Package,omitempty"`
	ImportedResources map[string]*PackageReferences `protobuf:"bytes,2,rep,name=imported_resources,json=importedResources" json:"imported_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	ErrMsg            string                        `protobuf:"bytes,3,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
}

func (m *CrawlResult) Reset()                    { *m = CrawlResult{} }
func (m *CrawlResult) String() string            { return proto.CompactTextString(m) }
func (*CrawlResult) ProtoMessage()               {}
func (*CrawlResult) Descriptor() ([]byte, []int) { return fileDescriptorRemoteCrawler, []int{0} }

func (m *CrawlResult) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *CrawlResult) GetImportedResources() map[string]*PackageReferences {
	if m != nil {
		return m.ImportedResources
	}
	return nil
}

func (m *CrawlResult) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (*CrawlResult) XXX_MessageName() string {
	return "domain.CrawlResult"
}
func init() {
	proto.RegisterType((*CrawlResult)(nil), "domain.CrawlResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteCrawlerService service

type RemoteCrawlerServiceClient interface {
	// rpc Next() returns (ToCrawlEntry) {}
	Attach(ctx context.Context, opts ...grpc.CallOption) (RemoteCrawlerService_AttachClient, error)
}

type remoteCrawlerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCrawlerServiceClient(cc *grpc.ClientConn) RemoteCrawlerServiceClient {
	return &remoteCrawlerServiceClient{cc}
}

func (c *remoteCrawlerServiceClient) Attach(ctx context.Context, opts ...grpc.CallOption) (RemoteCrawlerService_AttachClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteCrawlerService_serviceDesc.Streams[0], c.cc, "/domain.RemoteCrawlerService/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCrawlerServiceAttachClient{stream}
	return x, nil
}

type RemoteCrawlerService_AttachClient interface {
	Send(*CrawlResult) error
	Recv() (*ToCrawlEntry, error)
	grpc.ClientStream
}

type remoteCrawlerServiceAttachClient struct {
	grpc.ClientStream
}

func (x *remoteCrawlerServiceAttachClient) Send(m *CrawlResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCrawlerServiceAttachClient) Recv() (*ToCrawlEntry, error) {
	m := new(ToCrawlEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteCrawlerService service

type RemoteCrawlerServiceServer interface {
	// rpc Next() returns (ToCrawlEntry) {}
	Attach(RemoteCrawlerService_AttachServer) error
}

func RegisterRemoteCrawlerServiceServer(s *grpc.Server, srv RemoteCrawlerServiceServer) {
	s.RegisterService(&_RemoteCrawlerService_serviceDesc, srv)
}

func _RemoteCrawlerService_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteCrawlerServiceServer).Attach(&remoteCrawlerServiceAttachServer{stream})
}

type RemoteCrawlerService_AttachServer interface {
	Send(*ToCrawlEntry) error
	Recv() (*CrawlResult, error)
	grpc.ServerStream
}

type remoteCrawlerServiceAttachServer struct {
	grpc.ServerStream
}

func (x *remoteCrawlerServiceAttachServer) Send(m *ToCrawlEntry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCrawlerServiceAttachServer) Recv() (*CrawlResult, error) {
	m := new(CrawlResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RemoteCrawlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.RemoteCrawlerService",
	HandlerType: (*RemoteCrawlerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _RemoteCrawlerService_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote_crawler.proto",
}

func (m *CrawlResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrawlResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Package != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(m.Package.Size()))
		n1, err := m.Package.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ImportedResources) > 0 {
		for k, _ := range m.ImportedResources {
			dAtA[i] = 0x12
			i++
			v := m.ImportedResources[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRemoteCrawler(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRemoteCrawler(uint64(len(k))) + msgSize
			i = encodeVarintRemoteCrawler(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRemoteCrawler(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRemoteCrawler(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRemoteCrawler(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func encodeVarintRemoteCrawler(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CrawlResult) Size() (n int) {
	var l int
	_ = l
	if m.Package != nil {
		l = m.Package.Size()
		n += 1 + l + sovRemoteCrawler(uint64(l))
	}
	if len(m.ImportedResources) > 0 {
		for k, v := range m.ImportedResources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRemoteCrawler(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRemoteCrawler(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRemoteCrawler(uint64(mapEntrySize))
		}
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovRemoteCrawler(uint64(l))
	}
	return n
}

func sovRemoteCrawler(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRemoteCrawler(x uint64) (n int) {
	return sovRemoteCrawler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrawlResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrawlResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrawlResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Package == nil {
				m.Package = &Package{}
			}
			if err := m.Package.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImportedResources == nil {
				m.ImportedResources = make(map[string]*PackageReferences)
			}
			var mapkey string
			var mapvalue *PackageReferences
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRemoteCrawler
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRemoteCrawler
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRemoteCrawler
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PackageReferences{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRemoteCrawler
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ImportedResources[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteCrawler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteCrawler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteCrawler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteCrawler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteCrawler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRemoteCrawler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRemoteCrawler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRemoteCrawler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRemoteCrawler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteCrawler   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("remote_crawler.proto", fileDescriptorRemoteCrawler) }

var fileDescriptorRemoteCrawler = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x59, 0x47, 0x0d, 0xaa, 0x2b, 0xfe, 0x6d, 0xab, 0x2a, 0x0d, 0xc8, 0xb5, 0x7a, 0x4a,
	0x23, 0xe2, 0x6d, 0x83, 0x84, 0x50, 0x6e, 0xa1, 0x54, 0x15, 0x12, 0x48, 0xc8, 0x70, 0x00, 0x2e,
	0xd1, 0xc4, 0x9e, 0x6c, 0xdc, 0xd8, 0x5e, 0x6b, 0x77, 0x93, 0x90, 0x2b, 0x67, 0x4e, 0xf4, 0xc2,
	0xe3, 0x70, 0xec, 0x11, 0x89, 0x17, 0x40, 0x09, 0x0f, 0x82, 0xb2, 0xde, 0x40, 0x15, 0x85, 0x93,
	0x77, 0xbe, 0xf9, 0xcd, 0x78, 0x66, 0xf4, 0xb9, 0x7b, 0x12, 0x33, 0xa1, 0xb1, 0x17, 0x49, 0x98,
	0xa6, 0x28, 0x83, 0x42, 0x0a, 0x2d, 0x68, 0x35, 0x16, 0x19, 0x24, 0x79, 0xfd, 0x21, 0x17, 0x82,
	0xa7, 0xc8, 0x8c, 0xda, 0x1f, 0x0f, 0x18, 0x66, 0x85, 0x9e, 0x95, 0x50, 0xfd, 0x70, 0x3d, 0xa9,
	0x93, 0x0c, 0x95, 0x86, 0xac, 0xb0, 0x80, 0xbf, 0x0e, 0x0c, 0x12, 0x4c, 0xe3, 0x5e, 0x06, 0x6a,
	0x64, 0x89, 0x47, 0x96, 0x80, 0x22, 0x61, 0x90, 0xe7, 0x42, 0x83, 0x4e, 0x44, 0xae, 0x6c, 0xf6,
	0xb1, 0xf9, 0x44, 0x2d, 0x8e, 0x79, 0x4b, 0x4d, 0x81, 0x73, 0x94, 0x4c, 0x14, 0x86, 0xd8, 0x40,
	0xb7, 0x78, 0xa2, 0x87, 0xe3, 0x7e, 0x10, 0x89, 0x8c, 0x71, 0xc1, 0xc5, 0xbf, 0xdf, 0x2e, 0x23,
	0x13, 0x98, 0x97, 0xc5, 0x9f, 0xde, 0xc0, 0xb3, 0x69, 0xa2, 0x47, 0x62, 0xca, 0xb8, 0x68, 0x99,
	0x64, 0x6b, 0x02, 0x69, 0x12, 0x83, 0x16, 0x52, 0xb1, 0xbf, 0x4f, 0x5b, 0x77, 0xa7, 0x80, 0x68,
	0x04, 0x1c, 0x6d, 0x48, 0xb5, 0x28, 0x4f, 0x97, 0x6b, 0x69, 0x0f, 0x73, 0xf4, 0xc5, 0x71, 0x77,
	0xce, 0x96, 0x62, 0x88, 0x6a, 0x9c, 0x6a, 0x7a, 0xec, 0xde, 0x7e, 0x53, 0x16, 0xd5, 0x88, 0x4f,
	0x1a, 0x3b, 0xed, 0x7b, 0x41, 0x79, 0xdf, 0xc0, 0xca, 0xe1, 0x2a, 0x4f, 0x3f, 0xb8, 0x34, 0xc9,
	0x0a, 0x21, 0x35, 0xc6, 0x3d, 0x89, 0x4a, 0x8c, 0x65, 0x84, 0xaa, 0xe6, 0xf8, 0x95, 0xc6, 0x4e,
	0xbb, 0xb9, 0xaa, 0xba, 0xd1, 0x3b, 0x78, 0x69, 0xe9, 0x70, 0x05, 0x9f, 0x2f, 0x07, 0x09, 0x1f,
	0x24, 0xeb, 0x3a, 0xdd, 0x77, 0xab, 0xe7, 0x52, 0xbe, 0x56, 0xbc, 0x56, 0xf1, 0x49, 0x63, 0x3b,
	0xb4, 0x51, 0xbd, 0xe7, 0xee, 0x6f, 0x6e, 0x42, 0xef, 0xbb, 0x95, 0x11, 0xce, 0xcc, 0xcc, 0xdb,
	0xe1, 0xf2, 0x49, 0x99, 0xbb, 0x35, 0x81, 0x74, 0x8c, 0x35, 0xc7, 0xec, 0x71, 0xb0, 0xbe, 0x07,
	0x0e, 0x50, 0x62, 0x1e, 0xa1, 0x0a, 0x4b, 0xae, 0xe3, 0x3c, 0x23, 0xed, 0x4b, 0x77, 0x2f, 0x34,
	0x26, 0x3b, 0x2b, 0x3d, 0xf6, 0x16, 0xe5, 0x24, 0x89, 0x90, 0x86, 0x6e, 0xb5, 0xab, 0x35, 0x44,
	0x43, 0xba, 0xbb, 0x61, 0xb3, 0xfa, 0xde, 0x4a, 0x7c, 0x27, 0x8c, 0x6c, 0x66, 0x3a, 0x3a, 0xf8,
	0xfc, 0xf3, 0xf7, 0x95, 0xb3, 0x7b, 0x74, 0xd7, 0x78, 0x66, 0x72, 0xca, 0xc0, 0xb4, 0xe8, 0x90,
	0x66, 0x83, 0x9c, 0x90, 0xe7, 0x57, 0xe4, 0x6b, 0xf7, 0x3d, 0xdd, 0x6a, 0x57, 0x4e, 0x83, 0x93,
	0x26, 0x71, 0xe4, 0x2b, 0xf7, 0xb8, 0x9b, 0xc7, 0x52, 0x64, 0x18, 0x83, 0x7f, 0x01, 0x29, 0x7c,
	0x9a, 0xf9, 0x17, 0x22, 0x85, 0x9c, 0xfb, 0x76, 0x66, 0xe5, 0xbf, 0x00, 0x0d, 0x7d, 0x50, 0x48,
	0x0f, 0x87, 0x5a, 0x17, 0xaa, 0xc3, 0xd8, 0x25, 0xcc, 0x34, 0xcc, 0x52, 0x21, 0x8d, 0x3b, 0x60,
	0xd5, 0xe0, 0x7a, 0xee, 0x91, 0x1f, 0x73, 0x8f, 0xfc, 0x9a, 0x7b, 0xe4, 0xdb, 0xc2, 0xbb, 0xf5,
	0x7d, 0xe1, 0x91, 0xeb, 0x85, 0x47, 0x3e, 0x7a, 0xff, 0x29, 0x60, 0xe5, 0x06, 0xfd, 0xaa, 0xf1,
	0xc5, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x58, 0x44, 0x6d, 0x03, 0x00, 0x00,
}
