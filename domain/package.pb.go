// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: package.proto

package domain // import "jaytaylor.com/andromeda/domain"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Package struct {
	ID                   uint64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string                        `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	URL                  string                        `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Owner                string                        `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	VCS                  string                        `protobuf:"bytes,6,opt,name=vcs,proto3" json:"vcs,omitempty"`
	ImportedBy           map[string]*PackageReferences `protobuf:"bytes,7,rep,name=imported_by,json=importedBy" json:"imported_by,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Data                 *PackageSnapshot              `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	History              []*PackageCrawl               `protobuf:"bytes,9,rep,name=history" json:"history,omitempty"`
	FirstSeenAt          *time.Time                    `protobuf:"bytes,10,opt,name=first_seen_at,json=firstSeenAt,stdtime" json:"first_seen_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_198c0644ae71d570, []int{0}
}
func (m *Package) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Package.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(dst, src)
}
func (m *Package) XXX_Size() int {
	return m.Size()
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *Package) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Package) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Package) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Package) GetVCS() string {
	if m != nil {
		return m.VCS
	}
	return ""
}

func (m *Package) GetImportedBy() map[string]*PackageReferences {
	if m != nil {
		return m.ImportedBy
	}
	return nil
}

func (m *Package) GetData() *PackageSnapshot {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Package) GetHistory() []*PackageCrawl {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Package) GetFirstSeenAt() *time.Time {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

type PackageReferences struct {
	Refs                 []*PackageReference `protobuf:"bytes,1,rep,name=refs" json:"refs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PackageReferences) Reset()         { *m = PackageReferences{} }
func (m *PackageReferences) String() string { return proto.CompactTextString(m) }
func (*PackageReferences) ProtoMessage()    {}
func (*PackageReferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_198c0644ae71d570, []int{1}
}
func (m *PackageReferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageReferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageReferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PackageReferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageReferences.Merge(dst, src)
}
func (m *PackageReferences) XXX_Size() int {
	return m.Size()
}
func (m *PackageReferences) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageReferences.DiscardUnknown(m)
}

var xxx_messageInfo_PackageReferences proto.InternalMessageInfo

func (m *PackageReferences) GetRefs() []*PackageReference {
	if m != nil {
		return m.Refs
	}
	return nil
}

type PackageReference struct {
	Path                 string     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Active               bool       `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	FirstSeenAt          *time.Time `protobuf:"bytes,3,opt,name=first_seen_at,json=firstSeenAt,stdtime" json:"first_seen_at,omitempty"`
	LastSeenAt           *time.Time `protobuf:"bytes,4,opt,name=last_seen_at,json=lastSeenAt,stdtime" json:"last_seen_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PackageReference) Reset()         { *m = PackageReference{} }
func (m *PackageReference) String() string { return proto.CompactTextString(m) }
func (*PackageReference) ProtoMessage()    {}
func (*PackageReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_198c0644ae71d570, []int{2}
}
func (m *PackageReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PackageReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageReference.Merge(dst, src)
}
func (m *PackageReference) XXX_Size() int {
	return m.Size()
}
func (m *PackageReference) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageReference.DiscardUnknown(m)
}

var xxx_messageInfo_PackageReference proto.InternalMessageInfo

func (m *PackageReference) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *PackageReference) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *PackageReference) GetFirstSeenAt() *time.Time {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

func (m *PackageReference) GetLastSeenAt() *time.Time {
	if m != nil {
		return m.LastSeenAt
	}
	return nil
}

type PackageCrawl struct {
	JobStartedAt         *time.Time       `protobuf:"bytes,1,opt,name=job_started_at,json=jobStartedAt,stdtime" json:"job_started_at,omitempty"`
	JobFinishedAt        *time.Time       `protobuf:"bytes,2,opt,name=job_finished_at,json=jobFinishedAt,stdtime" json:"job_finished_at,omitempty"`
	JobReason            string           `protobuf:"bytes,3,opt,name=job_reason,json=jobReason,proto3" json:"job_reason,omitempty"`
	JobSucceeded         bool             `protobuf:"varint,4,opt,name=job_succeeded,json=jobSucceeded,proto3" json:"job_succeeded,omitempty"`
	JobMessages          []string         `protobuf:"bytes,5,rep,name=job_messages,json=jobMessages" json:"job_messages,omitempty"`
	Data                 *PackageSnapshot `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PackageCrawl) Reset()         { *m = PackageCrawl{} }
func (m *PackageCrawl) String() string { return proto.CompactTextString(m) }
func (*PackageCrawl) ProtoMessage()    {}
func (*PackageCrawl) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_198c0644ae71d570, []int{3}
}
func (m *PackageCrawl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageCrawl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageCrawl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PackageCrawl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageCrawl.Merge(dst, src)
}
func (m *PackageCrawl) XXX_Size() int {
	return m.Size()
}
func (m *PackageCrawl) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageCrawl.DiscardUnknown(m)
}

var xxx_messageInfo_PackageCrawl proto.InternalMessageInfo

func (m *PackageCrawl) GetJobStartedAt() *time.Time {
	if m != nil {
		return m.JobStartedAt
	}
	return nil
}

func (m *PackageCrawl) GetJobFinishedAt() *time.Time {
	if m != nil {
		return m.JobFinishedAt
	}
	return nil
}

func (m *PackageCrawl) GetJobReason() string {
	if m != nil {
		return m.JobReason
	}
	return ""
}

func (m *PackageCrawl) GetJobSucceeded() bool {
	if m != nil {
		return m.JobSucceeded
	}
	return false
}

func (m *PackageCrawl) GetJobMessages() []string {
	if m != nil {
		return m.JobMessages
	}
	return nil
}

func (m *PackageCrawl) GetData() *PackageSnapshot {
	if m != nil {
		return m.Data
	}
	return nil
}

// TODO: Consider tracking earliest commit timestamp.
type PackageSnapshot struct {
	CreatedAt            *time.Time             `protobuf:"bytes,1,opt,name=created_at,json=createdAt,stdtime" json:"created_at,omitempty"`
	Repo                 string                 `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	SubPackages          map[string]*SubPackage `protobuf:"bytes,3,rep,name=sub_packages,json=subPackages" json:"sub_packages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Commits              int32                  `protobuf:"varint,4,opt,name=commits,proto3" json:"commits,omitempty"`
	CommittedAt          *time.Time             `protobuf:"bytes,5,opt,name=committed_at,json=committedAt,stdtime" json:"committed_at,omitempty"`
	CommitHash           string                 `protobuf:"bytes,6,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	Branches             int32                  `protobuf:"varint,7,opt,name=branches,proto3" json:"branches,omitempty"`
	Tags                 int32                  `protobuf:"varint,8,opt,name=tags,proto3" json:"tags,omitempty"`
	BytesVCS             uint64                 `protobuf:"varint,9,opt,name=bytes_vcs,json=bytesVcs,proto3" json:"bytes_vcs,omitempty"`
	BytesTotal           uint64                 `protobuf:"varint,10,opt,name=bytes_total,json=bytesTotal,proto3" json:"bytes_total,omitempty"`
	Forks                int32                  `protobuf:"varint,11,opt,name=forks,proto3" json:"forks,omitempty"`
	Stars                int32                  `protobuf:"varint,12,opt,name=stars,proto3" json:"stars,omitempty"`
	NumFiles             int32                  `protobuf:"varint,13,opt,name=num_files,json=numFiles,proto3" json:"num_files,omitempty"`
	NumGoFiles           int32                  `protobuf:"varint,14,opt,name=num_go_files,json=numGoFiles,proto3" json:"num_go_files,omitempty"`
	LOC                  int32                  `protobuf:"varint,15,opt,name=loc,proto3" json:"loc,omitempty"`
	NumImports           int32                  `protobuf:"varint,16,opt,name=num_imports,json=numImports,proto3" json:"num_imports,omitempty"`
	NumTestImports       int32                  `protobuf:"varint,17,opt,name=num_test_imports,json=numTestImports,proto3" json:"num_test_imports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PackageSnapshot) Reset()         { *m = PackageSnapshot{} }
func (m *PackageSnapshot) String() string { return proto.CompactTextString(m) }
func (*PackageSnapshot) ProtoMessage()    {}
func (*PackageSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_198c0644ae71d570, []int{4}
}
func (m *PackageSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PackageSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageSnapshot.Merge(dst, src)
}
func (m *PackageSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *PackageSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_PackageSnapshot proto.InternalMessageInfo

func (m *PackageSnapshot) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PackageSnapshot) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *PackageSnapshot) GetSubPackages() map[string]*SubPackage {
	if m != nil {
		return m.SubPackages
	}
	return nil
}

func (m *PackageSnapshot) GetCommits() int32 {
	if m != nil {
		return m.Commits
	}
	return 0
}

func (m *PackageSnapshot) GetCommittedAt() *time.Time {
	if m != nil {
		return m.CommittedAt
	}
	return nil
}

func (m *PackageSnapshot) GetCommitHash() string {
	if m != nil {
		return m.CommitHash
	}
	return ""
}

func (m *PackageSnapshot) GetBranches() int32 {
	if m != nil {
		return m.Branches
	}
	return 0
}

func (m *PackageSnapshot) GetTags() int32 {
	if m != nil {
		return m.Tags
	}
	return 0
}

func (m *PackageSnapshot) GetBytesVCS() uint64 {
	if m != nil {
		return m.BytesVCS
	}
	return 0
}

func (m *PackageSnapshot) GetBytesTotal() uint64 {
	if m != nil {
		return m.BytesTotal
	}
	return 0
}

func (m *PackageSnapshot) GetForks() int32 {
	if m != nil {
		return m.Forks
	}
	return 0
}

func (m *PackageSnapshot) GetStars() int32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

func (m *PackageSnapshot) GetNumFiles() int32 {
	if m != nil {
		return m.NumFiles
	}
	return 0
}

func (m *PackageSnapshot) GetNumGoFiles() int32 {
	if m != nil {
		return m.NumGoFiles
	}
	return 0
}

func (m *PackageSnapshot) GetLOC() int32 {
	if m != nil {
		return m.LOC
	}
	return 0
}

func (m *PackageSnapshot) GetNumImports() int32 {
	if m != nil {
		return m.NumImports
	}
	return 0
}

func (m *PackageSnapshot) GetNumTestImports() int32 {
	if m != nil {
		return m.NumTestImports
	}
	return 0
}

type SubPackage struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Imports              []string   `protobuf:"bytes,2,rep,name=imports" json:"imports,omitempty"`
	TestImports          []string   `protobuf:"bytes,3,rep,name=test_imports,json=testImports" json:"test_imports,omitempty"`
	Readme               string     `protobuf:"bytes,4,opt,name=readme,proto3" json:"readme,omitempty"`
	Active               bool       `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	FirstSeenAt          *time.Time `protobuf:"bytes,6,opt,name=first_seen_at,json=firstSeenAt,stdtime" json:"first_seen_at,omitempty"`
	LastSeenAt           *time.Time `protobuf:"bytes,7,opt,name=last_seen_at,json=lastSeenAt,stdtime" json:"last_seen_at,omitempty"`
	Synopsis             string     `protobuf:"bytes,8,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SubPackage) Reset()         { *m = SubPackage{} }
func (m *SubPackage) String() string { return proto.CompactTextString(m) }
func (*SubPackage) ProtoMessage()    {}
func (*SubPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_package_198c0644ae71d570, []int{5}
}
func (m *SubPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubPackage.Merge(dst, src)
}
func (m *SubPackage) XXX_Size() int {
	return m.Size()
}
func (m *SubPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_SubPackage.DiscardUnknown(m)
}

var xxx_messageInfo_SubPackage proto.InternalMessageInfo

func (m *SubPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubPackage) GetImports() []string {
	if m != nil {
		return m.Imports
	}
	return nil
}

func (m *SubPackage) GetTestImports() []string {
	if m != nil {
		return m.TestImports
	}
	return nil
}

func (m *SubPackage) GetReadme() string {
	if m != nil {
		return m.Readme
	}
	return ""
}

func (m *SubPackage) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *SubPackage) GetFirstSeenAt() *time.Time {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

func (m *SubPackage) GetLastSeenAt() *time.Time {
	if m != nil {
		return m.LastSeenAt
	}
	return nil
}

func (m *SubPackage) GetSynopsis() string {
	if m != nil {
		return m.Synopsis
	}
	return ""
}

func init() {
	proto.RegisterType((*Package)(nil), "domain.Package")
	proto.RegisterMapType((map[string]*PackageReferences)(nil), "domain.Package.ImportedByEntry")
	proto.RegisterType((*PackageReferences)(nil), "domain.PackageReferences")
	proto.RegisterType((*PackageReference)(nil), "domain.PackageReference")
	proto.RegisterType((*PackageCrawl)(nil), "domain.PackageCrawl")
	proto.RegisterType((*PackageSnapshot)(nil), "domain.PackageSnapshot")
	proto.RegisterMapType((map[string]*SubPackage)(nil), "domain.PackageSnapshot.SubPackagesEntry")
	proto.RegisterType((*SubPackage)(nil), "domain.SubPackage")
}
func (m *Package) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Package) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.VCS) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.VCS)))
		i += copy(dAtA[i:], m.VCS)
	}
	if len(m.ImportedBy) > 0 {
		for k, _ := range m.ImportedBy {
			dAtA[i] = 0x3a
			i++
			v := m.ImportedBy[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPackage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPackage(uint64(len(k))) + msgSize
			i = encodeVarintPackage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPackage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPackage(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.History) > 0 {
		for _, msg := range m.History {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintPackage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FirstSeenAt != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PackageReferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageReferences) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for _, msg := range m.Refs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPackage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PackageReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageReference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Active {
		dAtA[i] = 0x10
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstSeenAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)))
		n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.LastSeenAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAt)))
		n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PackageCrawl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageCrawl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JobStartedAt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.JobStartedAt)))
		n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.JobStartedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.JobFinishedAt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.JobFinishedAt)))
		n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.JobFinishedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.JobReason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.JobReason)))
		i += copy(dAtA[i:], m.JobReason)
	}
	if m.JobSucceeded {
		dAtA[i] = 0x20
		i++
		if m.JobSucceeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.JobMessages) > 0 {
		for _, s := range m.JobMessages {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Data != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PackageSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Repo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Repo)))
		i += copy(dAtA[i:], m.Repo)
	}
	if len(m.SubPackages) > 0 {
		for k, _ := range m.SubPackages {
			dAtA[i] = 0x1a
			i++
			v := m.SubPackages[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPackage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovPackage(uint64(len(k))) + msgSize
			i = encodeVarintPackage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPackage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPackage(dAtA, i, uint64(v.Size()))
				n10, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n10
			}
		}
	}
	if m.Commits != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Commits))
	}
	if m.CommittedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CommittedAt)))
		n11, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CommittedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.CommitHash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.CommitHash)))
		i += copy(dAtA[i:], m.CommitHash)
	}
	if m.Branches != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Branches))
	}
	if m.Tags != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Tags))
	}
	if m.BytesVCS != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.BytesVCS))
	}
	if m.BytesTotal != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.BytesTotal))
	}
	if m.Forks != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Forks))
	}
	if m.Stars != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.Stars))
	}
	if m.NumFiles != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.NumFiles))
	}
	if m.NumGoFiles != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.NumGoFiles))
	}
	if m.LOC != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.LOC))
	}
	if m.NumImports != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.NumImports))
	}
	if m.NumTestImports != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPackage(dAtA, i, uint64(m.NumTestImports))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubPackage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Imports) > 0 {
		for _, s := range m.Imports {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TestImports) > 0 {
		for _, s := range m.TestImports {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Readme) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Readme)))
		i += copy(dAtA[i:], m.Readme)
	}
	if m.Active {
		dAtA[i] = 0x28
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FirstSeenAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)))
		n12, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.LastSeenAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPackage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAt)))
		n13, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Synopsis) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Synopsis)))
		i += copy(dAtA[i:], m.Synopsis)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPackage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Package) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPackage(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.VCS)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if len(m.ImportedBy) > 0 {
		for k, v := range m.ImportedBy {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPackage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPackage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPackage(uint64(mapEntrySize))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPackage(uint64(l))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovPackage(uint64(l))
		}
	}
	if m.FirstSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageReferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Refs) > 0 {
		for _, e := range m.Refs {
			l = e.Size()
			n += 1 + l + sovPackage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.FirstSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.LastSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageCrawl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobStartedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.JobStartedAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.JobFinishedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.JobFinishedAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.JobReason)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.JobSucceeded {
		n += 2
	}
	if len(m.JobMessages) > 0 {
		for _, s := range m.JobMessages {
			l = len(s)
			n += 1 + l + sovPackage(uint64(l))
		}
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if len(m.SubPackages) > 0 {
		for k, v := range m.SubPackages {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPackage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovPackage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovPackage(uint64(mapEntrySize))
		}
	}
	if m.Commits != 0 {
		n += 1 + sovPackage(uint64(m.Commits))
	}
	if m.CommittedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CommittedAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.CommitHash)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.Branches != 0 {
		n += 1 + sovPackage(uint64(m.Branches))
	}
	if m.Tags != 0 {
		n += 1 + sovPackage(uint64(m.Tags))
	}
	if m.BytesVCS != 0 {
		n += 1 + sovPackage(uint64(m.BytesVCS))
	}
	if m.BytesTotal != 0 {
		n += 1 + sovPackage(uint64(m.BytesTotal))
	}
	if m.Forks != 0 {
		n += 1 + sovPackage(uint64(m.Forks))
	}
	if m.Stars != 0 {
		n += 1 + sovPackage(uint64(m.Stars))
	}
	if m.NumFiles != 0 {
		n += 1 + sovPackage(uint64(m.NumFiles))
	}
	if m.NumGoFiles != 0 {
		n += 1 + sovPackage(uint64(m.NumGoFiles))
	}
	if m.LOC != 0 {
		n += 1 + sovPackage(uint64(m.LOC))
	}
	if m.NumImports != 0 {
		n += 2 + sovPackage(uint64(m.NumImports))
	}
	if m.NumTestImports != 0 {
		n += 2 + sovPackage(uint64(m.NumTestImports))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if len(m.Imports) > 0 {
		for _, s := range m.Imports {
			l = len(s)
			n += 1 + l + sovPackage(uint64(l))
		}
	}
	if len(m.TestImports) > 0 {
		for _, s := range m.TestImports {
			l = len(s)
			n += 1 + l + sovPackage(uint64(l))
		}
	}
	l = len(m.Readme)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.FirstSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeenAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.LastSeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAt)
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.Synopsis)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPackage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPackage(x uint64) (n int) {
	return sovPackage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Package) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Package: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Package: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VCS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImportedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImportedBy == nil {
				m.ImportedBy = make(map[string]*PackageReferences)
			}
			var mapkey string
			var mapvalue *PackageReferences
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPackage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPackage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPackage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPackage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPackage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthPackage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PackageReferences{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPackage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPackage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ImportedBy[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PackageSnapshot{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &PackageCrawl{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenAt == nil {
				m.FirstSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageReferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageReferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageReferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refs = append(m.Refs, &PackageReference{})
			if err := m.Refs[len(m.Refs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenAt == nil {
				m.FirstSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAt == nil {
				m.LastSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageCrawl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageCrawl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageCrawl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobStartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobStartedAt == nil {
				m.JobStartedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.JobStartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobFinishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JobFinishedAt == nil {
				m.JobFinishedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.JobFinishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSucceeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JobSucceeded = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobMessages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobMessages = append(m.JobMessages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PackageSnapshot{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubPackages == nil {
				m.SubPackages = make(map[string]*SubPackage)
			}
			var mapkey string
			var mapvalue *SubPackage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPackage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPackage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPackage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPackage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPackage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthPackage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SubPackage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPackage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPackage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SubPackages[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			m.Commits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commits |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommittedAt == nil {
				m.CommittedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CommittedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Branches", wireType)
			}
			m.Branches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Branches |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			m.Tags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesVCS", wireType)
			}
			m.BytesVCS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesVCS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesTotal", wireType)
			}
			m.BytesTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forks", wireType)
			}
			m.Forks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forks |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stars", wireType)
			}
			m.Stars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stars |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFiles", wireType)
			}
			m.NumFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFiles |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGoFiles", wireType)
			}
			m.NumGoFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumGoFiles |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LOC", wireType)
			}
			m.LOC = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LOC |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumImports", wireType)
			}
			m.NumImports = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumImports |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTestImports", wireType)
			}
			m.NumTestImports = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTestImports |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imports = append(m.Imports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestImports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestImports = append(m.TestImports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Readme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeenAt == nil {
				m.FirstSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAt == nil {
				m.LastSeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synopsis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Synopsis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPackage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPackage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPackage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPackage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPackage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPackage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("package.proto", fileDescriptor_package_198c0644ae71d570) }

var fileDescriptor_package_198c0644ae71d570 = []byte{
	// 980 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x8e, 0x23, 0x35,
	0x10, 0xa6, 0xd3, 0xf9, 0xeb, 0x4a, 0x32, 0x93, 0xb5, 0x56, 0x8b, 0x27, 0x88, 0x24, 0x84, 0x4b,
	0x10, 0xd0, 0x83, 0x86, 0x0b, 0xe2, 0x02, 0xc9, 0x2c, 0xc3, 0xae, 0x58, 0x04, 0x72, 0x86, 0x15,
	0xe2, 0x12, 0xb9, 0xbb, 0x9d, 0xa4, 0x33, 0xe9, 0x76, 0x64, 0xbb, 0x67, 0x95, 0xb7, 0xe0, 0xc8,
	0x7b, 0xc0, 0x43, 0xec, 0x91, 0xc3, 0x9e, 0x07, 0x14, 0x5e, 0x04, 0xd9, 0xee, 0xfc, 0x6c, 0x96,
	0x45, 0x59, 0xc4, 0xcd, 0xf5, 0xd5, 0x57, 0xe5, 0x72, 0xb9, 0xfc, 0x75, 0x43, 0x63, 0x49, 0xc3,
	0x1b, 0x3a, 0x65, 0xfe, 0x52, 0x70, 0xc5, 0x51, 0x39, 0xe2, 0x09, 0x8d, 0xd3, 0xd6, 0xc7, 0xd3,
	0x58, 0xcd, 0xb2, 0xc0, 0x0f, 0x79, 0x72, 0x3e, 0xe5, 0x53, 0x7e, 0x6e, 0xdc, 0x41, 0x36, 0x31,
	0x96, 0x31, 0xcc, 0xca, 0x86, 0xb5, 0x3a, 0x53, 0xce, 0xa7, 0x0b, 0xb6, 0x63, 0xa9, 0x38, 0x61,
	0x52, 0xd1, 0x64, 0x69, 0x09, 0xbd, 0x17, 0x2e, 0x54, 0xbe, 0xb7, 0x3b, 0xa1, 0x07, 0x50, 0x88,
	0x23, 0xec, 0x74, 0x9d, 0x7e, 0x71, 0x58, 0x5e, 0xdf, 0x75, 0x0a, 0x8f, 0x1f, 0x92, 0x42, 0x1c,
	0x21, 0x04, 0xc5, 0x94, 0x26, 0x0c, 0x17, 0xba, 0x4e, 0xdf, 0x23, 0x66, 0xad, 0xb1, 0x25, 0x55,
	0x33, 0xec, 0x5a, 0x4c, 0xaf, 0xd1, 0x19, 0xb8, 0x99, 0x58, 0xe0, 0xa2, 0x86, 0x86, 0x95, 0xf5,
	0x5d, 0xc7, 0xfd, 0x81, 0x3c, 0x21, 0x1a, 0x43, 0xf7, 0xa1, 0xc4, 0x9f, 0xa5, 0x4c, 0xe0, 0x92,
	0xe1, 0x5b, 0x43, 0x07, 0xdc, 0x86, 0x12, 0x97, 0x77, 0x01, 0x4f, 0x2f, 0x47, 0x44, 0x63, 0xe8,
	0x4b, 0xa8, 0xc5, 0xc9, 0x92, 0x0b, 0xc5, 0xa2, 0x71, 0xb0, 0xc2, 0x95, 0xae, 0xdb, 0xaf, 0x5d,
	0x74, 0x7c, 0xdb, 0x05, 0x3f, 0xaf, 0xd8, 0x7f, 0x9c, 0x53, 0x86, 0xab, 0xaf, 0x52, 0x25, 0x56,
	0x04, 0xe2, 0x2d, 0x80, 0x3e, 0x84, 0x62, 0x44, 0x15, 0xc5, 0xd5, 0xae, 0xd3, 0xaf, 0x5d, 0xbc,
	0x7d, 0x10, 0x3a, 0x4a, 0xe9, 0x52, 0xce, 0xb8, 0x22, 0x86, 0x84, 0x7c, 0xa8, 0xcc, 0x62, 0xa9,
	0xb8, 0x58, 0x61, 0xcf, 0x6c, 0x75, 0xff, 0x80, 0x7f, 0x29, 0xe8, 0xb3, 0x05, 0xd9, 0x90, 0xd0,
	0x43, 0x68, 0x4c, 0x62, 0x21, 0xd5, 0x58, 0x32, 0x96, 0x8e, 0xa9, 0xc2, 0x60, 0x76, 0x69, 0xf9,
	0xb6, 0xdf, 0xfe, 0xa6, 0xdf, 0xfe, 0xf5, 0xa6, 0xdf, 0xc3, 0xe2, 0xcf, 0x7f, 0x74, 0x1c, 0x52,
	0x33, 0x61, 0x23, 0xc6, 0xd2, 0x81, 0x6a, 0xfd, 0x08, 0xa7, 0x07, 0x27, 0x40, 0x4d, 0x70, 0x6f,
	0xd8, 0xca, 0x5c, 0x82, 0x47, 0xf4, 0x12, 0x9d, 0x43, 0xe9, 0x96, 0x2e, 0x32, 0xdb, 0xfe, 0xda,
	0xc5, 0xd9, 0x41, 0x61, 0x84, 0x4d, 0x98, 0x60, 0x69, 0xc8, 0x24, 0xb1, 0xbc, 0xcf, 0x0b, 0x9f,
	0x39, 0xbd, 0x01, 0xdc, 0x7b, 0xc5, 0x8f, 0x3e, 0x82, 0xa2, 0x60, 0x13, 0x89, 0x1d, 0x73, 0x42,
	0xfc, 0xba, 0x44, 0xc4, 0xb0, 0x7a, 0xcf, 0x1d, 0x68, 0x1e, 0xba, 0xb6, 0xd7, 0xee, 0xec, 0x5d,
	0xfb, 0x03, 0x28, 0xd3, 0x50, 0xc5, 0xb7, 0xb6, 0xc2, 0x2a, 0xc9, 0xad, 0x57, 0x7b, 0xe4, 0xfe,
	0x87, 0x1e, 0xa1, 0x21, 0xd4, 0x17, 0x74, 0x2f, 0x49, 0xf1, 0xc8, 0x24, 0xa0, 0xa3, 0x6c, 0x8e,
	0xde, 0x6f, 0x05, 0xa8, 0xef, 0xdf, 0x23, 0xba, 0x82, 0x93, 0x39, 0x0f, 0xc6, 0x52, 0x51, 0x33,
	0x60, 0x54, 0x99, 0x03, 0x1d, 0x93, 0xb6, 0x3e, 0xe7, 0xc1, 0xc8, 0x86, 0x0d, 0x14, 0x7a, 0x04,
	0xa7, 0x3a, 0xcf, 0x24, 0x4e, 0x63, 0x39, 0xb3, 0x89, 0x0a, 0x47, 0x26, 0x6a, 0xcc, 0x79, 0x70,
	0x95, 0xc7, 0x0d, 0x14, 0x7a, 0x17, 0x40, 0x67, 0x12, 0x8c, 0x4a, 0x9e, 0xe6, 0xaf, 0xca, 0x9b,
	0xf3, 0x80, 0x18, 0x00, 0xbd, 0x0f, 0x0d, 0x53, 0x70, 0x16, 0x86, 0x8c, 0x45, 0x2c, 0x32, 0x6d,
	0xa8, 0xda, 0x6a, 0x36, 0x18, 0x7a, 0x0f, 0xb4, 0x3d, 0x4e, 0x98, 0x94, 0x74, 0xca, 0x24, 0x2e,
	0x75, 0xdd, 0xbe, 0x47, 0x6a, 0x73, 0x1e, 0x7c, 0x9b, 0x43, 0xdb, 0x47, 0x51, 0x3e, 0xe2, 0x51,
	0xf4, 0x5e, 0x94, 0xe0, 0xf4, 0xc0, 0x83, 0xbe, 0x00, 0x08, 0x05, 0xa3, 0x6f, 0xd8, 0x35, 0x2f,
	0x8f, 0x19, 0x28, 0x3d, 0x41, 0x82, 0x2d, 0xf9, 0x46, 0x4c, 0xf4, 0x1a, 0x7d, 0x03, 0x75, 0x99,
	0x05, 0xe3, 0x5c, 0xf1, 0x24, 0x76, 0xcd, 0x80, 0xf6, 0x5f, 0x53, 0x9d, 0x3f, 0xca, 0x82, 0x1c,
	0x92, 0xf6, 0xd9, 0xd7, 0xe4, 0x0e, 0x41, 0x18, 0x2a, 0x21, 0x4f, 0x92, 0x58, 0x49, 0xd3, 0xa4,
	0x12, 0xd9, 0x98, 0xe8, 0x12, 0xea, 0x76, 0x99, 0x57, 0x5f, 0x3a, 0x76, 0x1e, 0xb7, 0x51, 0x03,
	0x85, 0x3a, 0x90, 0x9b, 0xe3, 0x19, 0x95, 0x33, 0xab, 0x5d, 0x04, 0x2c, 0xf4, 0x88, 0xca, 0x19,
	0x6a, 0x41, 0x35, 0x10, 0x34, 0x0d, 0x67, 0x4c, 0xe2, 0x8a, 0x29, 0x60, 0x6b, 0xeb, 0xc3, 0x2b,
	0x3a, 0x95, 0x46, 0x93, 0x4a, 0xc4, 0xac, 0xd1, 0x07, 0xe0, 0x05, 0x2b, 0xc5, 0xe4, 0x58, 0x4b,
	0xa1, 0x67, 0xc4, 0xb7, 0xbe, 0xbe, 0xeb, 0x54, 0x87, 0x1a, 0xd4, 0x7a, 0x58, 0x35, 0xee, 0xa7,
	0xa1, 0xd4, 0x7b, 0x5b, 0xaa, 0xe2, 0x8a, 0x2e, 0x8c, 0xe6, 0x14, 0x09, 0x18, 0xe8, 0x5a, 0x23,
	0x5a, 0x66, 0x27, 0x5c, 0xdc, 0x48, 0x5c, 0x33, 0x1b, 0x58, 0x43, 0xa3, 0x7a, 0xd2, 0x25, 0xae,
	0x5b, 0xd4, 0x18, 0xe8, 0x1d, 0xf0, 0xd2, 0x2c, 0x19, 0x4f, 0xe2, 0x05, 0x93, 0xb8, 0x61, 0x0b,
	0x4d, 0xb3, 0xe4, 0x4a, 0xdb, 0xa8, 0x0b, 0x75, 0xed, 0x9c, 0xf2, 0xdc, 0x7f, 0x62, 0xfc, 0x90,
	0x66, 0xc9, 0xd7, 0xdc, 0x32, 0xce, 0xc0, 0x5d, 0xf0, 0x10, 0x9f, 0x6a, 0x87, 0xd5, 0xee, 0x27,
	0xdf, 0x5d, 0x12, 0x8d, 0xe9, 0x32, 0x75, 0xb0, 0xd5, 0x62, 0x89, 0x9b, 0xdb, 0x58, 0x2b, 0x76,
	0x12, 0xf5, 0xa1, 0xa9, 0x09, 0x8a, 0x49, 0xb5, 0x65, 0xdd, 0x33, 0xac, 0x93, 0x34, 0x4b, 0xae,
	0x99, 0x54, 0x39, 0xb3, 0x45, 0xa0, 0x79, 0x78, 0xdb, 0xff, 0x20, 0x91, 0xfd, 0x97, 0x25, 0x12,
	0x6d, 0x06, 0x67, 0x17, 0xba, 0xaf, 0x8d, 0xbf, 0x16, 0x00, 0x76, 0x9e, 0xed, 0xd7, 0xcd, 0xd9,
	0xfb, 0xba, 0x61, 0xa8, 0x6c, 0xea, 0x2a, 0x98, 0x47, 0xb4, 0x31, 0xf5, 0x1b, 0x7b, 0xa9, 0x6c,
	0xd7, 0xbe, 0x31, 0xb5, 0xab, 0x59, 0xeb, 0xa1, 0x60, 0x34, 0x4a, 0x98, 0xfd, 0x12, 0x92, 0xdc,
	0xda, 0xd3, 0xc9, 0xd2, 0xbf, 0xeb, 0x64, 0xf9, 0xff, 0xd0, 0xc9, 0xca, 0x9b, 0xeb, 0xa4, 0x1e,
	0x5d, 0xb9, 0x4a, 0xf9, 0x52, 0xc6, 0x76, 0x44, 0x3d, 0xb2, 0xb5, 0x87, 0x9f, 0x3c, 0x5f, 0xb7,
	0x9d, 0xdf, 0xd7, 0x6d, 0xe7, 0xcf, 0x75, 0xdb, 0xf9, 0xe5, 0xaf, 0xf6, 0x5b, 0x3f, 0xb5, 0xe7,
	0x74, 0xa5, 0xe8, 0x6a, 0xc1, 0x85, 0xf9, 0x1b, 0xa1, 0x69, 0x24, 0x78, 0xc2, 0x22, 0x7a, 0x6e,
	0xbb, 0x1f, 0x94, 0xcd, 0x9e, 0x9f, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x07, 0xd2, 0xc7,
	0xca, 0x08, 0x00, 0x00,
}
